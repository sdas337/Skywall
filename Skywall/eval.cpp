#include "eval.h"

using namespace std;

// Sourced Pesto Eval

#define FLIP(sq) ((sq)^56)

uint64_t passedPawnMasks[2][64] = { 
    {217020518514230016, 506381209866536704, 1012762419733073408, 2025524839466146816, 4051049678932293632, 8102099357864587264, 16204198715729174528, 13889313184910721024, 217020518514229248, 506381209866534912, 1012762419733069824, 2025524839466139648, 4051049678932279296, 8102099357864558592, 16204198715729117184, 13889313184910671872, 217020518514032640, 506381209866076160, 1012762419732152320, 2025524839464304640, 4051049678928609280, 8102099357857218560, 16204198715714437120, 13889313184898088960, 217020518463700992, 506381209748635648, 1012762419497271296, 2025524838994542592, 4051049677989085184, 8102099355978170368, 16204198711956340736, 13889313181676863488, 217020505578799104, 506381179683864576, 1012762359367729152, 2025524718735458304, 4051049437470916608, 8102098874941833216, 16204197749883666432, 13889312357043142656, 217017207043915776, 506373483102470144, 1012746966204940288, 2025493932409880576, 4050987864819761152, 8101975729639522304, 16203951459279044608, 13889101250810609664, 216172782113783808, 504403158265495552, 1008806316530991104, 2017612633061982208, 4035225266123964416, 8070450532247928832, 16140901064495857664, 13835058055282163712, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 14, 28, 56, 112, 224, 192, 771, 1799, 3598, 7196, 14392, 28784, 57568, 49344, 197379, 460551, 921102, 1842204, 3684408, 7368816, 14737632, 12632256, 50529027, 117901063, 235802126, 471604252, 943208504, 1886417008, 3772834016, 3233857728, 12935430915, 30182672135, 60365344270, 120730688540, 241461377080, 482922754160, 965845508320, 827867578560, 3311470314243, 7726764066567, 15453528133134, 30907056266268, 61814112532536, 123628225065072, 247256450130144, 211934100111552, 847736400446211, 1978051601041159, 3956103202082318, 7912206404164636, 15824412808329272, 31648825616658544, 63297651233317088, 54255129628557504}
};

int gamephaseInc[6] = {0, 0, 1, 1, 2, 4};

// no piece  = 0, king = 1, pawn = 2, knight = 3, bishop = 4, rook = 5, queen = 6, white = 8, black = 16

/*const int material[] = { S(9988, 10004), S(112, 121), S(348, 343), S(389, 365), S(506, 640), S(1006, 1194) };
const int psts[][64] = {
        {S(-15, -28), S(60, -60), S(22, -42), S(-116, -16), S(4, -58), S(-81, -25), S(41, -59), S(25, -83), S(-13, -11), S(-32, -7), S(-55, 0), S(-77, 2), S(-63, 0), S(-50, -4), S(13, -26), S(11, -37), S(-87, 5), S(-44, 6), S(-82, 18), S(-92, 23), S(-85, 24), S(-82, 16), S(-51, 1), S(-70, -11), S(-75, -3), S(-56, 17), S(-64, 26), S(-91, 39), S(-87, 37), S(-85, 32), S(-92, 23), S(-88, 0), S(-17, 0), S(-21, 26), S(-46, 34), S(-10, 27), S(-28, 38), S(-3, 34), S(-58, 45), S(-68, 19), S(-11, 13), S(56, 24), S(14, 20), S(16, 26), S(90, 10), S(73, 36), S(16, 49), S(-30, 31), S(36, -1), S(70, 9), S(94, 0), S(8, 9), S(82, 6), S(66, 29), S(34, 40), S(47, -6), S(258, -110), S(137, -39), S(115, -43), S(83, -35), S(161, -37), S(51, 3), S(110, 4), S(230, -58)},
        {S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-67, 7), S(-41, 3), S(-47, -10), S(-62, -1), S(-42, 1), S(1, -11), S(41, -21), S(-31, -19), S(-67, 1), S(-37, -1), S(-48, -16), S(-49, -10), S(-30, -11), S(-19, -18), S(27, -19), S(-20, -23), S(-64, 5), S(-32, 0), S(-30, -20), S(-19, -26), S(-16, -25), S(-10, -22), S(4, -14), S(-36, -18), S(-53, 19), S(-22, 9), S(-26, -8), S(-10, -25), S(6, -22), S(4, -24), S(17, -6), S(-12, -13), S(-34, 63), S(2, 46), S(17, 28), S(3, 14), S(26, 2), S(65, -5), S(82, 6), S(9, 24), S(169, 92), S(159, 97), S(152, 88), S(127, 65), S(137, 62), S(108, 62), S(-19, 102), S(52, 81), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31)},
        {S(-95, -65), S(-39, -62), S(-65, -20), S(-49, -14), S(-38, -20), S(-9, -39), S(-30, -57), S(-73, -74), S(-61, -32), S(-47, -8), S(-21, -3), S(-4, -5), S(-8, -2), S(6, -17), S(-17, -15), S(-31, -29), S(-33, -24), S(-6, 1), S(6, 9), S(22, 22), S(32, 20), S(10, 5), S(19, -7), S(-30, -21), S(-10, 0), S(11, 16), S(30, 36), S(21, 42), S(36, 41), S(28, 32), S(30, 11), S(-4, -6), S(-2, 11), S(20, 22), S(52, 39), S(86, 36), S(46, 44), S(78, 39), S(17, 29), S(42, 1), S(-14, -2), S(45, 9), S(81, 19), S(87, 29), S(120, 16), S(135, 17), S(69, 12), S(21, -6), S(-35, -11), S(-10, 19), S(51, 5), S(61, 15), S(56, 13), S(119, -12), S(-25, 11), S(2, -18), S(-181, -38), S(-101, 4), S(-80, 34), S(-47, 12), S(28, -1), S(-151, 27), S(-16, -21), S(-137, -73)},
        {S(-43, -27), S(-19, -16), S(-22, -32), S(-46, -2), S(-32, -9), S(-21, -16), S(4, -37), S(-46, -26), S(1, -12), S(-4, -19), S(9, -8), S(-8, 2), S(-1, 4), S(18, -11), S(25, -18), S(3, -34), S(-6, -11), S(14, 3), S(6, 11), S(16, 5), S(18, 15), S(9, 6), S(12, -10), S(9, -13), S(-9, -3), S(9, 10), S(15, 16), S(41, 15), S(37, 15), S(10, 17), S(10, 11), S(2, -7), S(-5, 1), S(14, 18), S(42, 6), S(62, 15), S(47, 18), S(45, 14), S(13, 19), S(-7, 5), S(-6, 1), S(43, 1), S(29, 10), S(58, 4), S(67, 10), S(62, 14), S(58, 2), S(33, -4), S(-22, -10), S(12, 1), S(19, 5), S(-8, 10), S(23, 2), S(33, 2), S(-2, 1), S(-16, -13), S(-77, -2), S(-99, 12), S(-88, 7), S(-88, 14), S(-88, 14), S(-146, 14), S(-3, -1), S(-18, -9)},
        {S(-39, -23), S(-33, -18), S(-23, -7), S(-17, -8), S(-15, -19), S(-23, -24), S(-15, -26), S(-50, -30), S(-68, -13), S(-46, -16), S(-34, -11), S(-28, -16), S(-24, -21), S(-19, -30), S(-8, -31), S(-65, -21), S(-66, -9), S(-55, -3), S(-46, -6), S(-34, -9), S(-31, -11), S(-36, -13), S(-1, -33), S(-40, -29), S(-58, 9), S(-45, 11), S(-41, 15), S(-21, 8), S(-22, 0), S(-41, 5), S(-37, -1), S(-43, -12), S(-38, 24), S(-32, 27), S(-11, 24), S(19, 11), S(22, 7), S(9, 15), S(4, 10), S(-2, 3), S(-3, 23), S(14, 21), S(30, 21), S(38, 14), S(76, -1), S(65, 3), S(77, 0), S(17, 13), S(11, 26), S(25, 24), S(43, 24), S(67, 14), S(49, 18), S(86, 3), S(54, 13), S(65, -3), S(55, -1), S(32, 17), S(49, 13), S(60, 7), S(66, 5), S(31, 15), S(60, 7), S(85, -5)},
        {S(-18, -55), S(-28, -59), S(-23, -46), S(2, -85), S(-15, -67), S(-28, -93), S(-46, -73), S(-50, -74), S(-27, -38), S(-4, -48), S(5, -54), S(5, -51), S(4, -51), S(15, -81), S(25, -103), S(2, -122), S(-29, -30), S(-4, -37), S(-7, -7), S(-9, -10), S(2, -16), S(6, -21), S(12, -47), S(7, -70), S(-20, -24), S(-27, 18), S(-10, 16), S(-16, 52), S(-7, 30), S(-9, 27), S(3, 7), S(4, -13), S(-25, -1), S(-26, 38), S(-18, 55), S(1, 57), S(7, 66), S(0, 69), S(-5, 47), S(18, 7), S(-20, -7), S(-23, 39), S(-7, 51), S(-8, 69), S(45, 52), S(84, 32), S(65, 19), S(34, 14), S(-41, 24), S(-54, 67), S(-34, 83), S(-19, 83), S(-17, 98), S(44, 47), S(-39, 74), S(46, -14), S(-50, 36), S(-13, 29), S(5, 43), S(41, 24), S(24, 44), S(75, 12), S(82, -2), S(111, -32)},
};
const int passedPawns[] = { S(57, -12), S(57, -10), S(52, 16), S(80, 28), S(123, 26), S(155, -54) };*/


const int material[] = { S(9988, 10004), S(113, 122), S(350, 345), S(366, 361), S(511, 642), S(1034, 1186) };
const int psts[][64] = {
        {S(-14, -28), S(60, -60), S(22, -43), S(-116, -16), S(4, -58), S(-80, -26), S(42, -59), S(26, -83), S(-12, -11), S(-32, -7), S(-54, 0), S(-76, 2), S(-62, 0), S(-49, -4), S(14, -26), S(13, -37), S(-87, 5), S(-42, 6), S(-83, 18), S(-91, 23), S(-85, 24), S(-82, 16), S(-50, 1), S(-69, -11), S(-75, -3), S(-56, 17), S(-65, 26), S(-92, 39), S(-89, 37), S(-85, 32), S(-92, 23), S(-88, 0), S(-18, 0), S(-23, 27), S(-48, 34), S(-9, 27), S(-30, 38), S(-4, 34), S(-59, 45), S(-70, 19), S(-14, 13), S(54, 24), S(13, 21), S(15, 25), S(89, 10), S(75, 35), S(15, 50), S(-31, 31), S(37, -1), S(68, 9), S(96, -1), S(9, 8), S(82, 5), S(66, 29), S(35, 41), S(45, -6), S(259, -110), S(140, -39), S(114, -43), S(85, -35), S(160, -37), S(50, 3), S(111, 5), S(231, -58)},
        {S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-67, 7), S(-40, 4), S(-47, -10), S(-62, -1), S(-42, 1), S(1, -11), S(42, -21), S(-31, -20), S(-68, 1), S(-36, 0), S(-48, -16), S(-48, -9), S(-30, -11), S(-19, -18), S(27, -19), S(-20, -24), S(-64, 6), S(-32, 0), S(-30, -20), S(-18, -26), S(-15, -25), S(-10, -22), S(4, -14), S(-36, -18), S(-53, 19), S(-21, 9), S(-26, -8), S(-10, -25), S(7, -22), S(4, -24), S(18, -7), S(-12, -13), S(-34, 63), S(2, 46), S(17, 28), S(3, 14), S(26, 2), S(65, -6), S(82, 5), S(9, 24), S(169, 92), S(159, 98), S(152, 88), S(127, 65), S(135, 62), S(108, 63), S(-22, 103), S(53, 81), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31)},
        {S(-96, -66), S(-39, -61), S(-66, -19), S(-49, -14), S(-38, -19), S(-10, -39), S(-30, -58), S(-72, -76), S(-62, -33), S(-47, -8), S(-21, -3), S(-4, -3), S(-8, -1), S(5, -17), S(-17, -16), S(-31, -29), S(-33, -25), S(-6, 1), S(7, 10), S(22, 23), S(33, 21), S(11, 6), S(19, -7), S(-30, -22), S(-10, 1), S(12, 16), S(30, 36), S(22, 43), S(37, 41), S(28, 32), S(30, 11), S(-4, -6), S(-1, 11), S(20, 22), S(51, 39), S(87, 35), S(47, 44), S(78, 39), S(17, 28), S(42, 0), S(-15, -2), S(45, 10), S(81, 19), S(86, 29), S(119, 15), S(134, 17), S(68, 12), S(21, -6), S(-35, -11), S(-10, 19), S(52, 6), S(60, 15), S(56, 13), S(120, -12), S(-26, 10), S(3, -20), S(-179, -36), S(-103, 6), S(-81, 34), S(-44, 11), S(29, -1), S(-152, 27), S(-16, -21), S(-137, -70)},
        {S(-45, -29), S(-19, -16), S(-24, -35), S(-47, -3), S(-34, -10), S(-22, -17), S(2, -37), S(-47, -26), S(1, -12), S(-5, -19), S(9, -8), S(-10, 1), S(-2, 3), S(16, -11), S(25, -18), S(2, -35), S(-7, -12), S(14, 4), S(6, 12), S(16, 7), S(17, 15), S(10, 8), S(12, -9), S(10, -14), S(-10, -3), S(9, 10), S(16, 18), S(41, 16), S(38, 16), S(9, 17), S(11, 11), S(0, -7), S(-5, 0), S(14, 19), S(43, 7), S(64, 16), S(48, 18), S(47, 15), S(11, 18), S(-6, 5), S(-6, 0), S(42, 1), S(31, 11), S(58, 3), S(68, 10), S(64, 14), S(60, 3), S(32, -5), S(-22, -11), S(12, 1), S(19, 4), S(-7, 11), S(23, 2), S(36, 3), S(-2, 1), S(-14, -13), S(-76, 0), S(-98, 10), S(-86, 7), S(-90, 14), S(-87, 14), S(-147, 14), S(-1, -1), S(-17, -9)},
        {S(-39, -22), S(-34, -18), S(-24, -6), S(-17, -7), S(-15, -18), S(-23, -24), S(-16, -26), S(-51, -30), S(-69, -13), S(-46, -16), S(-34, -11), S(-28, -16), S(-24, -21), S(-19, -30), S(-8, -32), S(-65, -20), S(-66, -9), S(-55, -3), S(-46, -6), S(-35, -8), S(-31, -11), S(-36, -14), S(0, -33), S(-40, -29), S(-58, 9), S(-45, 11), S(-41, 15), S(-21, 8), S(-23, 0), S(-41, 5), S(-37, -1), S(-44, -13), S(-38, 24), S(-31, 26), S(-12, 24), S(18, 12), S(22, 7), S(11, 14), S(5, 10), S(-1, 3), S(-3, 23), S(14, 21), S(29, 22), S(37, 14), S(76, -1), S(65, 2), S(78, -1), S(17, 13), S(12, 26), S(25, 24), S(44, 24), S(66, 14), S(49, 19), S(86, 3), S(54, 13), S(67, -3), S(54, -1), S(31, 17), S(49, 14), S(60, 7), S(66, 5), S(33, 14), S(63, 6), S(86, -5)},
        {S(-19, -54), S(-28, -59), S(-23, -46), S(2, -86), S(-15, -66), S(-28, -92), S(-44, -74), S(-50, -73), S(-27, -38), S(-4, -47), S(5, -55), S(5, -52), S(4, -52), S(16, -81), S(26, -103), S(2, -121), S(-29, -29), S(-4, -37), S(-7, -6), S(-8, -12), S(3, -16), S(6, -21), S(13, -47), S(8, -70), S(-20, -25), S(-27, 18), S(-9, 15), S(-17, 53), S(-7, 29), S(-9, 27), S(3, 7), S(5, -14), S(-25, -1), S(-26, 38), S(-18, 56), S(1, 57), S(7, 67), S(0, 69), S(-4, 47), S(18, 5), S(-20, -7), S(-23, 39), S(-7, 50), S(-9, 70), S(44, 53), S(84, 32), S(65, 18), S(34, 14), S(-41, 24), S(-55, 68), S(-34, 84), S(-19, 83), S(-18, 98), S(44, 47), S(-39, 74), S(47, -15), S(-50, 35), S(-15, 31), S(4, 44), S(39, 26), S(22, 44), S(76, 12), S(85, -4), S(112, -31)},
};
const int passedPawns[] = { S(57, -12), S(57, -10), S(52, 16), S(80, 29), S(123, 27), S(156, -54) };
const int bishopPair = S(31, 59);

void testEval() {
    for (int pieceType = 0; pieceType < 6; pieceType++) {
        for (int sq = 0; sq < 64; sq++) {
            //cout << ((short)psts[pieceType][sq ^ 56]) << " ";
            cout << (extract_eg(psts[pieceType][sq ^ 56])) << " ";
            if (sq % 8 == 7) {
                cout << "\n";
            }
        }
        cout << "\n";
    }
    return;
}

void evalPawns(Board& board, int& mgScore, int& egScore) {
    //mgScore += 1;
    //egScore += 1;

    uint64_t relevantPawnBoard = board.pieceBoards[2] & board.occupiedBoard[board.currentPlayer];

    int mgPassedPawnScores[7] = { 0, 1, -4, -14, 13, 8, 51};
    int egPassedPawnScores[7] = { 0, 12, 19, 52, 74, 150, 162};

    while (relevantPawnBoard != 0) {
        int pawnSquare = popLSB(relevantPawnBoard);

        if (!(passedPawnMasks[board.currentPlayer - 1][pawnSquare] & board.pieceBoards[2])) {    // It's a passed pawn
            int index = pawnSquare ^ (board.currentPlayer == 2 ? 56 : 0);

            mgScore += (board.currentPlayer == 2 ? -1 : 1) * mgPassedPawnScores[index / 8 - 1];
            egScore += (board.currentPlayer == 2 ? -1 : 1) * egPassedPawnScores[index / 8 - 1];
        }
    }
}

int evaluate(Board& board) {
    int score[2] = {S(0, 0), S(0, 0) };
    int bishopCount[2] = { 0,0 };
    int gamePhase = 0;

    /* evaluate each piece */
    for (int sq = 0; sq < 64; ++sq) {
        int piece = board.rawBoard[sq];

        if (piece != 0) {
            int pieceType = (piece % 8 - 1);
            int pieceColor = piece / 8 - 1;
            int index = sq ^ (pieceColor == 1 ? 56 : 0);

            score[pieceColor] += material[pieceType];
            score[pieceColor] += psts[pieceType][index];

            gamePhase += gamephaseInc[pieceType];

            if (pieceType == 1 && pieceColor == board.currentPlayer - 1) {	// Passed Pawn Detection
                if (!(passedPawnMasks[board.currentPlayer - 1][sq] & board.pieceBoards[2])) {
                    score[pieceColor] += passedPawns[index / 8 - 1];
                }
            }
            if (pieceType == 3) {
                bishopCount[pieceColor]++;
            }
        }
    }

    for (int col = 0; col < 2; col++) {
        if (bishopCount[col] == 2) {
            score[col] += bishopPair;
        }
    }

    /* tapered eval */
    int mergedScore = score[0] - score[1];

    //cout << extract_mg(mergedScore) << " " << extract_eg(mergedScore) << "\n";

    int finalScore = (extract_mg(mergedScore) * gamePhase + extract_eg(mergedScore) * (24 - gamePhase));

    finalScore = finalScore / (board.currentPlayer == 1 ? 24 : -24) + gamePhase/2;

    return finalScore;

}