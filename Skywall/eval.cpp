#include "eval.h"

using namespace std;

// Sourced Pesto Eval

#define FLIP(sq) ((sq)^56)

uint64_t passedPawnMasks[2][64] = {
    {217020518514230016, 506381209866536704, 1012762419733073408, 2025524839466146816, 4051049678932293632, 8102099357864587264, 16204198715729174528, 13889313184910721024, 217020518514229248, 506381209866534912, 1012762419733069824, 2025524839466139648, 4051049678932279296, 8102099357864558592, 16204198715729117184, 13889313184910671872, 217020518514032640, 506381209866076160, 1012762419732152320, 2025524839464304640, 4051049678928609280, 8102099357857218560, 16204198715714437120, 13889313184898088960, 217020518463700992, 506381209748635648, 1012762419497271296, 2025524838994542592, 4051049677989085184, 8102099355978170368, 16204198711956340736, 13889313181676863488, 217020505578799104, 506381179683864576, 1012762359367729152, 2025524718735458304, 4051049437470916608, 8102098874941833216, 16204197749883666432, 13889312357043142656, 217017207043915776, 506373483102470144, 1012746966204940288, 2025493932409880576, 4050987864819761152, 8101975729639522304, 16203951459279044608, 13889101250810609664, 216172782113783808, 504403158265495552, 1008806316530991104, 2017612633061982208, 4035225266123964416, 8070450532247928832, 16140901064495857664, 13835058055282163712, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 14, 28, 56, 112, 224, 192, 771, 1799, 3598, 7196, 14392, 28784, 57568, 49344, 197379, 460551, 921102, 1842204, 3684408, 7368816, 14737632, 12632256, 50529027, 117901063, 235802126, 471604252, 943208504, 1886417008, 3772834016, 3233857728, 12935430915, 30182672135, 60365344270, 120730688540, 241461377080, 482922754160, 965845508320, 827867578560, 3311470314243, 7726764066567, 15453528133134, 30907056266268, 61814112532536, 123628225065072, 247256450130144, 211934100111552, 847736400446211, 1978051601041159, 3956103202082318, 7912206404164636, 15824412808329272, 31648825616658544, 63297651233317088, 54255129628557504}
};

int kingBuckets[64] = { 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1 };
int gamephaseInc[6] = { 0, 0, 1, 1, 2, 4 };

// no piece  = 0, king = 1, pawn = 2, knight = 3, bishop = 4, rook = 5, queen = 6, white = 8, black = 16

/*const int material[] = {S(9988, 10004), S(113, 122), S(350, 345), S(366, 361), S(511, 642), S(1034, 1186)};
const int psts[][64] = {
        {S(-14, -28), S(60, -60), S(22, -43), S(-116, -16), S(4, -58), S(-80, -26), S(42, -59), S(26, -83), S(-12, -11), S(-32, -7), S(-54, 0), S(-76, 2), S(-62, 0), S(-49, -4), S(14, -26), S(13, -37), S(-87, 5), S(-42, 6), S(-83, 18), S(-91, 23), S(-85, 24), S(-82, 16), S(-50, 1), S(-69, -11), S(-75, -3), S(-56, 17), S(-65, 26), S(-92, 39), S(-89, 37), S(-85, 32), S(-92, 23), S(-88, 0), S(-18, 0), S(-23, 27), S(-48, 34), S(-9, 27), S(-30, 38), S(-4, 34), S(-59, 45), S(-70, 19), S(-14, 13), S(54, 24), S(13, 21), S(15, 25), S(89, 10), S(75, 35), S(15, 50), S(-31, 31), S(37, -1), S(68, 9), S(96, -1), S(9, 8), S(82, 5), S(66, 29), S(35, 41), S(45, -6), S(259, -110), S(140, -39), S(114, -43), S(85, -35), S(160, -37), S(50, 3), S(111, 5), S(231, -58)},
        {S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-67, 7), S(-40, 4), S(-47, -10), S(-62, -1), S(-42, 1), S(1, -11), S(42, -21), S(-31, -20), S(-68, 1), S(-36, 0), S(-48, -16), S(-48, -9), S(-30, -11), S(-19, -18), S(27, -19), S(-20, -24), S(-64, 6), S(-32, 0), S(-30, -20), S(-18, -26), S(-15, -25), S(-10, -22), S(4, -14), S(-36, -18), S(-53, 19), S(-21, 9), S(-26, -8), S(-10, -25), S(7, -22), S(4, -24), S(18, -7), S(-12, -13), S(-34, 63), S(2, 46), S(17, 28), S(3, 14), S(26, 2), S(65, -6), S(82, 5), S(9, 24), S(169, 92), S(159, 98), S(152, 88), S(127, 65), S(135, 62), S(108, 63), S(-22, 103), S(53, 81), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31)},
        {S(-96, -66), S(-39, -61), S(-66, -19), S(-49, -14), S(-38, -19), S(-10, -39), S(-30, -58), S(-72, -76), S(-62, -33), S(-47, -8), S(-21, -3), S(-4, -3), S(-8, -1), S(5, -17), S(-17, -16), S(-31, -29), S(-33, -25), S(-6, 1), S(7, 10), S(22, 23), S(33, 21), S(11, 6), S(19, -7), S(-30, -22), S(-10, 1), S(12, 16), S(30, 36), S(22, 43), S(37, 41), S(28, 32), S(30, 11), S(-4, -6), S(-1, 11), S(20, 22), S(51, 39), S(87, 35), S(47, 44), S(78, 39), S(17, 28), S(42, 0), S(-15, -2), S(45, 10), S(81, 19), S(86, 29), S(119, 15), S(134, 17), S(68, 12), S(21, -6), S(-35, -11), S(-10, 19), S(52, 6), S(60, 15), S(56, 13), S(120, -12), S(-26, 10), S(3, -20), S(-179, -36), S(-103, 6), S(-81, 34), S(-44, 11), S(29, -1), S(-152, 27), S(-16, -21), S(-137, -70)},
        {S(-45, -29), S(-19, -16), S(-24, -35), S(-47, -3), S(-34, -10), S(-22, -17), S(2, -37), S(-47, -26), S(1, -12), S(-5, -19), S(9, -8), S(-10, 1), S(-2, 3), S(16, -11), S(25, -18), S(2, -35), S(-7, -12), S(14, 4), S(6, 12), S(16, 7), S(17, 15), S(10, 8), S(12, -9), S(10, -14), S(-10, -3), S(9, 10), S(16, 18), S(41, 16), S(38, 16), S(9, 17), S(11, 11), S(0, -7), S(-5, 0), S(14, 19), S(43, 7), S(64, 16), S(48, 18), S(47, 15), S(11, 18), S(-6, 5), S(-6, 0), S(42, 1), S(31, 11), S(58, 3), S(68, 10), S(64, 14), S(60, 3), S(32, -5), S(-22, -11), S(12, 1), S(19, 4), S(-7, 11), S(23, 2), S(36, 3), S(-2, 1), S(-14, -13), S(-76, 0), S(-98, 10), S(-86, 7), S(-90, 14), S(-87, 14), S(-147, 14), S(-1, -1), S(-17, -9)},
        {S(-39, -22), S(-34, -18), S(-24, -6), S(-17, -7), S(-15, -18), S(-23, -24), S(-16, -26), S(-51, -30), S(-69, -13), S(-46, -16), S(-34, -11), S(-28, -16), S(-24, -21), S(-19, -30), S(-8, -32), S(-65, -20), S(-66, -9), S(-55, -3), S(-46, -6), S(-35, -8), S(-31, -11), S(-36, -14), S(0, -33), S(-40, -29), S(-58, 9), S(-45, 11), S(-41, 15), S(-21, 8), S(-23, 0), S(-41, 5), S(-37, -1), S(-44, -13), S(-38, 24), S(-31, 26), S(-12, 24), S(18, 12), S(22, 7), S(11, 14), S(5, 10), S(-1, 3), S(-3, 23), S(14, 21), S(29, 22), S(37, 14), S(76, -1), S(65, 2), S(78, -1), S(17, 13), S(12, 26), S(25, 24), S(44, 24), S(66, 14), S(49, 19), S(86, 3), S(54, 13), S(67, -3), S(54, -1), S(31, 17), S(49, 14), S(60, 7), S(66, 5), S(33, 14), S(63, 6), S(86, -5)},
        {S(-19, -54), S(-28, -59), S(-23, -46), S(2, -86), S(-15, -66), S(-28, -92), S(-44, -74), S(-50, -73), S(-27, -38), S(-4, -47), S(5, -55), S(5, -52), S(4, -52), S(16, -81), S(26, -103), S(2, -121), S(-29, -29), S(-4, -37), S(-7, -6), S(-8, -12), S(3, -16), S(6, -21), S(13, -47), S(8, -70), S(-20, -25), S(-27, 18), S(-9, 15), S(-17, 53), S(-7, 29), S(-9, 27), S(3, 7), S(5, -14), S(-25, -1), S(-26, 38), S(-18, 56), S(1, 57), S(7, 67), S(0, 69), S(-4, 47), S(18, 5), S(-20, -7), S(-23, 39), S(-7, 50), S(-9, 70), S(44, 53), S(84, 32), S(65, 18), S(34, 14), S(-41, 24), S(-55, 68), S(-34, 84), S(-19, 83), S(-18, 98), S(44, 47), S(-39, 74), S(47, -15), S(-50, 35), S(-15, 31), S(4, 44), S(39, 26), S(22, 44), S(76, 12), S(85, -4), S(112, -31)},
};
const int passedPawns[] = { S(57, -12), S(57, -10), S(52, 16), S(80, 29), S(123, 27), S(156, -54) };
const int bishopPair = S(31, 59);*/

const int material[] = { S(9971, 10004), S(143, 122), S(351, 346), S(372, 363), S(505, 644), S(1007, 1192) };
const int kingPsts[][6][64] = {
    {
        {S(-26, -35), S(25, -64), S(-13, -47), S(-94, -29), S(3, -50), S(-81, -18), S(41, -51), S(25, -75), S(-29, -18), S(-23, -19), S(-56, -9), S(-63, -9), S(-63, 8), S(-50, 4), S(13, -18), S(12, -29), S(-90, -4), S(-43, -3), S(-69, 5), S(-87, 12), S(-86, 32), S(-83, 24), S(-51, 9), S(-70, -3), S(-84, -10), S(-46, 7), S(-55, 15), S(-78, 28), S(-90, 45), S(-86, 40), S(-93, 31), S(-89, 8), S(-27, -7), S(-18, 18), S(-28, 23), S(6, 20), S(-31, 46), S(-5, 42), S(-60, 53), S(-71, 27), S(-14, 5), S(59, 16), S(22, 15), S(31, 18), S(88, 18), S(74, 43), S(14, 58), S(-32, 39), S(19, -6), S(75, 2), S(104, -8), S(29, 1), S(81, 13), S(65, 37), S(34, 49), S(44, 2), S(258, -119), S(112, -41), S(117, -48), S(90, -41), S(159, -29), S(49, 11), S(110, 13), S(230, -50)},
        {S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30), S(-37, -4), S(48, -24), S(3, -32), S(-62, -6), S(-107, -4), S(-79, -5), S(-98, 7), S(-147, 13), S(-34, -4), S(13, -13), S(-14, -27), S(-52, -15), S(-63, -14), S(-69, -17), S(-79, -1), S(-139, -3), S(-49, 6), S(-11, 0), S(-13, -22), S(-27, -24), S(-52, -15), S(-54, -17), S(-66, -4), S(-130, 0), S(-18, 15), S(13, 5), S(-17, -8), S(-28, -16), S(-28, -14), S(-29, -18), S(-59, 5), S(-106, 6), S(66, 48), S(65, 49), S(43, 42), S(-1, 27), S(27, 8), S(17, 0), S(28, 2), S(-94, 37), S(348, 64), S(395, 60), S(337, 71), S(240, 56), S(87, 83), S(162, 40), S(-14, 69), S(-29, 71), S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30), S(-5, -30)},
        {S(-110, -58), S(-72, -13), S(-39, -17), S(-76, 0), S(-63, -12), S(-55, -48), S(-64, -43), S(-48, -82), S(-48, -11), S(14, -29), S(12, -3), S(-15, 7), S(-15, -7), S(-1, -14), S(13, -30), S(-94, -28), S(-24, -25), S(2, 0), S(43, 2), S(20, 20), S(50, 15), S(-6, 18), S(-3, -8), S(-30, -11), S(18, -3), S(4, 13), S(50, 33), S(19, 41), S(51, 30), S(36, 27), S(53, 3), S(-23, -2), S(-6, 13), S(50, 13), S(76, 35), S(129, 25), S(57, 38), S(102, 33), S(19, 20), S(37, -8), S(-40, 7), S(85, 5), S(99, 13), S(99, 29), S(122, 17), S(99, 24), S(65, 13), S(29, 2), S(-53, -3), S(-46, 34), S(58, 4), S(62, 6), S(40, 21), S(110, -6), S(-23, 2), S(-56, 2), S(-176, -62), S(-92, -2), S(20, 13), S(-17, -2), S(13, -5), S(-241, 30), S(-29, -19), S(-194, -57)},
        {S(-18, -18), S(6, -7), S(-45, -8), S(-75, 7), S(-38, -14), S(-27, -29), S(-34, -37), S(-100, -18), S(21, 2), S(56, -28), S(37, -5), S(-5, 4), S(-16, 1), S(-27, -3), S(-37, -6), S(-44, -21), S(-12, -2), S(24, 2), S(48, 1), S(20, 2), S(7, 16), S(-5, 11), S(-20, 0), S(-6, -13), S(-4, 7), S(22, -1), S(40, 6), S(52, 9), S(44, 11), S(-8, 28), S(26, 12), S(-13, 5), S(-16, -3), S(28, 15), S(71, 4), S(75, 11), S(45, 19), S(59, 8), S(7, 18), S(-1, 3), S(-28, 1), S(54, -5), S(41, 6), S(57, 8), S(64, 12), S(39, 18), S(83, -7), S(23, -7), S(-60, -9), S(-1, 1), S(13, -4), S(15, 2), S(30, 1), S(66, -1), S(39, -10), S(-44, -11), S(-149, 9), S(-132, 18), S(-60, 1), S(-53, 2), S(-6, 2), S(-128, -2), S(25, -6), S(-26, -10)},
        {S(-102, 7), S(-34, -4), S(-6, -18), S(-13, -13), S(-30, -13), S(-37, -28), S(-28, -33), S(-45, -23), S(-82, -1), S(-15, -20), S(-7, -19), S(-29, -17), S(-39, -16), S(-47, -17), S(-63, -17), S(-66, -26), S(-57, -8), S(-39, -10), S(-33, -10), S(-40, -2), S(-58, 4), S(-43, -4), S(-43, -22), S(-67, -23), S(-56, 9), S(15, -5), S(-15, 4), S(-23, 9), S(-50, 16), S(-47, 10), S(-81, 9), S(-57, -8), S(12, 12), S(-31, 33), S(8, 21), S(14, 14), S(1, 14), S(1, 17), S(-28, 12), S(-18, 5), S(-5, 26), S(11, 28), S(4, 31), S(37, 18), S(59, 2), S(61, 5), S(51, -4), S(7, 17), S(23, 24), S(61, 16), S(113, 4), S(64, 13), S(48, 16), S(123, -14), S(69, 2), S(39, -2), S(146, -36), S(112, -2), S(91, 4), S(54, 9), S(65, 1), S(43, 4), S(42, 4), S(62, -7)},
        {S(-122, -85), S(-42, -169), S(-7, -130), S(-17, -65), S(-6, -66), S(-48, -41), S(-41, -46), S(3, -90), S(-87, 22), S(-28, -43), S(42, -99), S(27, -58), S(17, -56), S(20, -55), S(16, -71), S(1, -82), S(-34, -62), S(5, -34), S(36, -10), S(0, 6), S(22, -25), S(2, -25), S(13, -58), S(27, -68), S(-21, -10), S(-21, 27), S(5, 26), S(0, 65), S(10, 22), S(12, 4), S(2, -25), S(38, -56), S(-30, -4), S(-27, 63), S(1, 87), S(23, 60), S(22, 69), S(28, 16), S(2, 39), S(14, -7), S(-31, 18), S(0, 58), S(-28, 101), S(5, 73), S(66, 55), S(76, 30), S(63, -16), S(72, -29), S(-52, 32), S(-75, 72), S(-28, 85), S(14, 71), S(-31, 95), S(36, 27), S(0, 23), S(53, -26), S(-59, 49), S(-72, 59), S(-3, 65), S(144, -26), S(-42, 80), S(-39, 95), S(-4, 70), S(79, -26)},
    },
    {
        {S(96, -36), S(170, -68), S(132, -51), S(-6, -24), S(-127, -43), S(-207, -13), S(-88, -44), S(-101, -69), S(98, -19), S(78, -15), S(56, -8), S(34, -6), S(-185, 12), S(-172, 9), S(-108, -14), S(-112, -25), S(23, -3), S(68, -2), S(27, 10), S(19, 15), S(-205, 37), S(-201, 27), S(-167, 10), S(-187, -1), S(35, -11), S(54, 9), S(45, 18), S(18, 31), S(-206, 47), S(-200, 42), S(-205, 31), S(-202, 9), S(92, -8), S(87, 19), S(62, 26), S(101, 19), S(-144, 47), S(-109, 41), S(-168, 52), S(-177, 25), S(96, 5), S(164, 16), S(123, 13), S(125, 17), S(-22, 17), S(-31, 40), S(-83, 53), S(-137, 38), S(147, -9), S(178, 1), S(206, -9), S(119, 0), S(-19, 11), S(-37, 33), S(-74, 45), S(-61, -1), S(369, -118), S(250, -47), S(224, -51), S(195, -43), S(67, -33), S(-44, 5), S(22, 5), S(198, -71)},
        {S(29, -28), S(29, -28), S(29, -28), S(29, -28), S(29, -28), S(29, -28), S(29, -28), S(29, -28), S(-86, 6), S(-61, 4), S(-69, -10), S(-79, -1), S(-56, 4), S(-7, -11), S(46, -26), S(-31, -27), S(-86, 0), S(-54, -1), S(-67, -16), S(-62, -9), S(-43, -10), S(-30, -17), S(27, -22), S(-20, -28), S(-81, 3), S(-47, -3), S(-48, -22), S(-34, -27), S(-28, -27), S(-20, -23), S(-1, -16), S(-40, -21), S(-70, 16), S(-38, 6), S(-41, -13), S(-24, -30), S(-5, -26), S(-8, -25), S(7, -7), S(-20, -15), S(-56, 61), S(-14, 36), S(3, 15), S(-10, 7), S(10, -1), S(53, -5), S(55, 15), S(2, 26), S(126, 97), S(116, 100), S(125, 81), S(106, 59), S(131, 55), S(82, 71), S(-63, 124), S(50, 93), S(29, -28), S(29, -28), S(29, -28), S(29, -28), S(29, -28), S(29, -28), S(29, -28), S(29, -28)},
        {S(-96, -72), S(-40, -69), S(-69, -22), S(-49, -16), S(-39, -19), S(-10, -36), S(-29, -59), S(-73, -77), S(-62, -41), S(-52, -4), S(-23, -5), S(-5, -3), S(-10, 0), S(7, -17), S(-18, -13), S(-29, -26), S(-34, -26), S(-8, 1), S(3, 9), S(21, 24), S(32, 22), S(11, 5), S(20, -5), S(-31, -24), S(-13, 0), S(13, 18), S(29, 37), S(22, 44), S(36, 44), S(27, 34), S(29, 12), S(-4, -5), S(-3, 11), S(18, 22), S(51, 39), S(84, 37), S(47, 45), S(79, 40), S(15, 31), S(41, 3), S(-18, -2), S(42, 9), S(81, 20), S(87, 28), S(119, 15), S(150, 13), S(70, 12), S(23, -12), S(-37, -11), S(-8, 16), S(50, 6), S(58, 19), S(62, 11), S(119, -13), S(-13, 11), S(6, -26), S(-190, -25), S(-110, 10), S(-94, 37), S(-49, 15), S(23, 2), S(-150, 32), S(20, -31), S(-129, -73)},
        {S(-45, -33), S(-18, -22), S(-23, -40), S(-43, -7), S(-34, -8), S(-20, -14), S(4, -34), S(-44, -27), S(5, -22), S(-6, -20), S(10, -12), S(-10, -1), S(0, 5), S(20, -12), S(30, -19), S(7, -37), S(-6, -14), S(16, 3), S(4, 13), S(17, 7), S(18, 15), S(12, 7), S(16, -10), S(11, -14), S(-9, -8), S(7, 13), S(15, 19), S(39, 18), S(39, 17), S(12, 14), S(12, 9), S(3, -13), S(-6, 2), S(15, 18), S(41, 6), S(67, 16), S(49, 18), S(48, 17), S(12, 19), S(-4, 4), S(-5, 1), S(40, 2), S(31, 12), S(60, 0), S(72, 9), S(68, 13), S(57, 8), S(29, -2), S(-25, -8), S(16, 1), S(17, 8), S(-11, 13), S(20, 2), S(34, 3), S(-6, 6), S(-11, -12), S(-76, 0), S(-98, 9), S(-92, 8), S(-106, 20), S(-99, 16), S(-161, 24), S(3, -1), S(-16, -7)},
        {S(-41, -21), S(-37, -18), S(-27, -5), S(-18, -7), S(-16, -18), S(-25, -23), S(-21, -23), S(-50, -39), S(-71, -13), S(-50, -15), S(-36, -10), S(-29, -16), S(-24, -21), S(-16, -34), S(3, -39), S(-69, -19), S(-68, -8), S(-59, -1), S(-50, -3), S(-35, -9), S(-30, -13), S(-35, -17), S(7, -38), S(-34, -32), S(-61, 10), S(-51, 12), S(-46, 17), S(-21, 8), S(-21, -2), S(-40, 3), S(-33, -3), S(-43, -14), S(-42, 24), S(-34, 26), S(-15, 24), S(19, 10), S(23, 6), S(13, 12), S(3, 14), S(-6, 5), S(-7, 24), S(13, 20), S(28, 22), S(37, 13), S(76, -1), S(66, 2), S(79, 5), S(12, 14), S(8, 27), S(21, 25), S(39, 25), S(65, 15), S(49, 18), S(86, 6), S(78, 10), S(84, -6), S(43, 6), S(27, 18), S(49, 13), S(61, 6), S(68, 5), S(44, 16), S(73, 7), S(88, -1)},
        {S(-23, -50), S(-32, -54), S(-28, -40), S(0, -84), S(-17, -66), S(-28, -95), S(-52, -81), S(-53, -98), S(-28, -39), S(-7, -43), S(2, -51), S(0, -48), S(2, -51), S(14, -81), S(25, -104), S(-3, -136), S(-28, -30), S(-6, -36), S(-13, -2), S(-10, -11), S(-1, -13), S(4, -17), S(13, -44), S(4, -69), S(-21, -28), S(-27, 16), S(-11, 15), S(-18, 51), S(-9, 32), S(-11, 31), S(2, 11), S(0, -11), S(-27, -2), S(-28, 35), S(-18, 50), S(0, 56), S(5, 67), S(-4, 79), S(-8, 52), S(15, 11), S(-23, -9), S(-26, 36), S(-3, 41), S(-10, 69), S(43, 52), S(87, 33), S(62, 34), S(23, 27), S(-44, 26), S(-50, 66), S(-33, 82), S(-23, 85), S(-19, 102), S(49, 53), S(-9, 73), S(56, -16), S(-54, 38), S(-11, 29), S(9, 39), S(25, 35), S(31, 40), S(102, -2), S(121, -25), S(123, -30)},
    }
};
const int passedPawns[] = { S(60, -12), S(59, -10), S(55, 15), S(82, 29), S(125, 27), S(156, -54) };
const int bishopPair = S(32, 60);


void testEval() {
    for (int pieceType = 0; pieceType < 6; pieceType++) {
        for (int sq = 0; sq < 64; sq++) {
            //cout << ((short)psts[pieceType][sq ^ 56]) << " ";
            //cout << (extract_eg(psts[pieceType][sq ^ 56])) << " ";
            if (sq % 8 == 7) {
                cout << "\n";
            }
        }
        cout << "\n";
    }
    return;
}

int evaluate(Board& board) {
    int score[2] = { S(0, 0), S(0, 0) };
    int bishopCount[2] = { 0,0 };
    int gamePhase = 0;

    int buckets[2] = { kingBuckets[board.kingLocations[1]], kingBuckets[board.kingLocations[2] ^ 56] };

    /* evaluate each piece */
    for (int sq = 0; sq < 64; ++sq) {
        int piece = board.rawBoard[sq];

        if (piece != 0) {
            int pieceType = (piece % 8 - 1);
            int pieceColor = piece / 8 - 1;
            int index = sq ^ (pieceColor == 1 ? 56 : 0);


            score[pieceColor] += material[pieceType];
            score[pieceColor] += kingPsts[buckets[pieceColor]][pieceType][index];
            //score[pieceColor] += psts[pieceType][index];

            gamePhase += gamephaseInc[pieceType];

            if (pieceType == 1 && pieceColor == board.currentPlayer - 1) {	// Passed Pawn Detection
                if (!(passedPawnMasks[board.currentPlayer - 1][sq] & board.pieceBoards[2])) {
                    score[pieceColor] += passedPawns[index / 8 - 1];
                }
            }
            if (pieceType == 3) {
                bishopCount[pieceColor]++;
            }
        }
    }

    for (int col = 0; col < 2; col++) {
        if (bishopCount[col] == 2) {
            score[col] += bishopPair;
        }
    }

    /* tapered eval */
    int mergedScore = score[0] - score[1];

    //cout << extract_mg(mergedScore) << " " << extract_eg(mergedScore) << "\n";

    int finalScore = (extract_mg(mergedScore) * gamePhase + extract_eg(mergedScore) * (24 - gamePhase));

    finalScore = finalScore / (board.currentPlayer == 1 ? 24 : -24) + gamePhase / 2;

    return finalScore;

}