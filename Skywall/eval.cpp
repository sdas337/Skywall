#include "eval.h"

using namespace std;

// Sourced Pesto Eval

#define FLIP(sq) ((sq)^56)

uint64_t passedPawnMasks[2][64] = {
    {217020518514230016, 506381209866536704, 1012762419733073408, 2025524839466146816, 4051049678932293632, 8102099357864587264, 16204198715729174528, 13889313184910721024, 217020518514229248, 506381209866534912, 1012762419733069824, 2025524839466139648, 4051049678932279296, 8102099357864558592, 16204198715729117184, 13889313184910671872, 217020518514032640, 506381209866076160, 1012762419732152320, 2025524839464304640, 4051049678928609280, 8102099357857218560, 16204198715714437120, 13889313184898088960, 217020518463700992, 506381209748635648, 1012762419497271296, 2025524838994542592, 4051049677989085184, 8102099355978170368, 16204198711956340736, 13889313181676863488, 217020505578799104, 506381179683864576, 1012762359367729152, 2025524718735458304, 4051049437470916608, 8102098874941833216, 16204197749883666432, 13889312357043142656, 217017207043915776, 506373483102470144, 1012746966204940288, 2025493932409880576, 4050987864819761152, 8101975729639522304, 16203951459279044608, 13889101250810609664, 216172782113783808, 504403158265495552, 1008806316530991104, 2017612633061982208, 4035225266123964416, 8070450532247928832, 16140901064495857664, 13835058055282163712, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 14, 28, 56, 112, 224, 192, 771, 1799, 3598, 7196, 14392, 28784, 57568, 49344, 197379, 460551, 921102, 1842204, 3684408, 7368816, 14737632, 12632256, 50529027, 117901063, 235802126, 471604252, 943208504, 1886417008, 3772834016, 3233857728, 12935430915, 30182672135, 60365344270, 120730688540, 241461377080, 482922754160, 965845508320, 827867578560, 3311470314243, 7726764066567, 15453528133134, 30907056266268, 61814112532536, 123628225065072, 247256450130144, 211934100111552, 847736400446211, 1978051601041159, 3956103202082318, 7912206404164636, 15824412808329272, 31648825616658544, 63297651233317088, 54255129628557504}
};

int kingBuckets[64] = { 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1 };
int gamephaseInc[6] = { 0, 0, 1, 1, 2, 4 };

// no piece  = 0, king = 1, pawn = 2, knight = 3, bishop = 4, rook = 5, queen = 6, white = 8, black = 16

const int psts[][6][64] = {
        {
                {S(-29, -33), S(26, -71), S(-24, -51), S(-124, -39), S(3, -50), S(-81, -18), S(41, -51), S(25, -75), S(-25, -32), S(-29, -22), S(-49, -16), S(-100, -8), S(-63, 8), S(-50, 4), S(13, -18), S(12, -29), S(-87, -16), S(-73, -2), S(-57, 5), S(-84, 13), S(-86, 32), S(-83, 24), S(-51, 9), S(-70, -3), S(-166, -6), S(-24, 0), S(-69, 21), S(-83, 30), S(-90, 45), S(-86, 40), S(-93, 31), S(-89, 8), S(-45, -12), S(-5, 15), S(20, 18), S(-21, 35), S(-31, 46), S(-5, 42), S(-60, 53), S(-71, 27), S(-54, 12), S(114, 10), S(138, -4), S(164, -1), S(88, 18), S(74, 43), S(14, 58), S(-32, 39), S(6, -6), S(102, 8), S(119, -7), S(50, -3), S(81, 13), S(65, 37), S(34, 49), S(44, 2), S(199, -112), S(54, -6), S(38, -15), S(120, -32), S(159, -29), S(49, 11), S(110, 13), S(230, -50)},
                {S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5), S(-87, -2), S(21, -23), S(11, -33), S(-58, -1), S(-76, -27), S(-66, -18), S(-64, -8), S(-96, -4), S(-76, -13), S(-2, -22), S(-15, -37), S(-54, -23), S(-38, -27), S(-69, -30), S(-37, -25), S(-89, -21), S(-84, -2), S(-24, -10), S(-25, -35), S(-13, -39), S(-30, -36), S(-37, -34), S(-26, -25), S(-82, -16), S(-14, -9), S(-16, -11), S(-22, -31), S(-10, -40), S(-31, -24), S(-35, -22), S(-26, -7), S(-69, 1), S(26, 21), S(80, 8), S(49, -18), S(64, -23), S(60, 20), S(-20, 30), S(-73, 64), S(-63, 67), S(440, 27), S(200, 45), S(347, 5), S(352, -27), S(50, 102), S(93, 143), S(158, 129), S(48, 139), S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5), S(-29, -5)},
                {S(-163, -83), S(-31, -57), S(-136, -20), S(-55, 8), S(-3, -27), S(-104, -13), S(-74, -61), S(-93, -40), S(-28, -25), S(105, -55), S(43, -19), S(1, -6), S(-13, -11), S(62, -27), S(59, -39), S(-68, -25), S(-18, -35), S(-9, -5), S(21, 12), S(40, 15), S(68, 12), S(-3, 15), S(-1, -20), S(-53, 20), S(29, 6), S(17, 21), S(41, 39), S(54, 31), S(39, 33), S(36, 29), S(31, 6), S(-60, -14), S(85, -12), S(51, 8), S(115, 26), S(87, 43), S(93, 36), S(28, 40), S(33, 24), S(-7, 12), S(-42, -5), S(82, 2), S(55, 13), S(86, 30), S(108, 31), S(69, 31), S(55, 12), S(10, 5), S(90, -44), S(72, -15), S(28, 5), S(20, 19), S(9, 25), S(132, 5), S(-70, 17), S(-83, 9), S(-423, 8), S(-7, 0), S(55, -30), S(-31, 5), S(42, -5), S(-119, 33), S(-39, 19), S(-319, -9)},
                {S(-68, -10), S(-83, 5), S(-27, -14), S(-85, 8), S(-14, -11), S(-65, -11), S(43, -37), S(-39, -15), S(-117, 23), S(13, -16), S(-49, 12), S(-4, 5), S(-28, 12), S(6, -10), S(-25, -2), S(-90, 9), S(-54, 15), S(-43, 19), S(31, 8), S(9, 7), S(25, 10), S(0, 12), S(19, -7), S(-43, 5), S(-76, 11), S(21, 0), S(7, 15), S(88, 0), S(59, 13), S(25, 19), S(10, 7), S(-6, 3), S(19, 1), S(53, 5), S(109, -8), S(79, 16), S(80, 14), S(8, 18), S(34, 13), S(-11, 9), S(17, -10), S(174, -31), S(76, -13), S(65, 2), S(43, 19), S(53, 10), S(18, 21), S(-42, 2), S(-29, -33), S(-49, -9), S(173, -38), S(1, -5), S(5, -3), S(26, 11), S(33, -1), S(-89, -9), S(141, -40), S(-95, -9), S(-82, -15), S(-63, -5), S(-169, 21), S(-8, -16), S(-8, 12), S(-4, -13)},
                {S(-83, -20), S(-46, -12), S(-8, -23), S(2, -22), S(-12, -31), S(-24, -32), S(-45, -30), S(-51, -16), S(-90, -12), S(-52, -14), S(29, -45), S(-25, -28), S(-53, -17), S(-95, -9), S(-85, -9), S(-132, 2), S(-91, -6), S(4, -34), S(-21, -19), S(-37, -4), S(-27, -15), S(-118, 24), S(-59, -11), S(-79, -5), S(-98, 11), S(-8, 3), S(31, -11), S(0, -4), S(-48, 15), S(-69, 32), S(-93, 18), S(-83, 19), S(-75, 29), S(-28, 21), S(61, 2), S(12, 18), S(14, 16), S(-33, 32), S(-51, 28), S(-52, 22), S(12, 16), S(167, -21), S(27, 16), S(54, 21), S(61, 5), S(91, 2), S(46, 0), S(12, 18), S(62, 7), S(139, -14), S(140, -8), S(158, -23), S(178, -12), S(102, 12), S(61, 14), S(-18, 34), S(29, 14), S(129, -14), S(103, -4), S(14, 25), S(58, -2), S(-55, 39), S(61, 7), S(88, 7)},
                {S(-32, -8), S(-21, -128), S(6, -117), S(-41, -39), S(7, -80), S(-107, 30), S(-14, 5), S(-70, 15), S(-45, 8), S(-5, -98), S(29, -85), S(-3, -92), S(-18, -50), S(-2, 9), S(-35, 8), S(-113, -81), S(-21, -68), S(23, -84), S(0, -32), S(-17, -7), S(0, -22), S(-7, -28), S(-34, -18), S(10, -133), S(32, -58), S(12, 25), S(18, -19), S(-30, 59), S(20, -27), S(10, -23), S(-24, -37), S(-103, 25), S(18, 81), S(33, 63), S(-43, 122), S(56, 45), S(-3, 69), S(3, 4), S(-68, 75), S(-86, -14), S(128, -22), S(165, -14), S(112, 48), S(-14, 57), S(-5, 70), S(-16, 39), S(-39, 31), S(-21, -9), S(104, 13), S(88, -27), S(-20, 90), S(56, 70), S(3, 82), S(-4, 0), S(-80, 67), S(-17, -41), S(11, -58), S(38, 31), S(31, 88), S(226, -40), S(38, 43), S(-131, 131), S(86, -16), S(-75, 72)},
        },
        {
                {S(83, -83), S(122, -85), S(74, -62), S(-8, -42), S(-110, -37), S(-190, -7), S(-71, -38), S(-84, -63), S(90, -44), S(67, -32), S(25, -15), S(5, -7), S(-168, 18), S(-155, 15), S(-91, -8), S(-95, -19), S(29, -20), S(33, 0), S(1, 8), S(-26, 20), S(-188, 43), S(-184, 33), S(-150, 16), S(-170, 5), S(42, -19), S(43, 12), S(44, 20), S(6, 35), S(-189, 53), S(-183, 48), S(-188, 37), S(-185, 15), S(67, -4), S(87, 25), S(59, 32), S(60, 32), S(-127, 53), S(-92, 47), S(-151, 58), S(-160, 31), S(140, -6), S(139, 21), S(77, 30), S(99, 29), S(-5, 23), S(-14, 46), S(-66, 59), S(-120, 44), S(95, -14), S(187, -3), S(205, -15), S(138, -11), S(-2, 17), S(-20, 39), S(-57, 51), S(-44, 5), S(325, -129), S(239, -61), S(194, -53), S(204, -55), S(84, -27), S(-27, 11), S(39, 11), S(215, -65)},
                {S(28, -47), S(28, -47), S(28, -47), S(28, -47), S(28, -47), S(28, -47), S(28, -47), S(28, -47), S(-29, -19), S(55, -34), S(6, -40), S(-76, -7), S(-100, -16), S(-73, -15), S(-81, 0), S(-126, -6), S(-22, -24), S(30, -28), S(-19, -36), S(-41, -30), S(-55, -25), S(-53, -33), S(-69, -14), S(-121, -17), S(-41, 4), S(-13, 4), S(-20, -20), S(-23, -34), S(-38, -36), S(-28, -43), S(-41, -30), S(-103, -26), S(-44, 47), S(-8, 33), S(-18, 7), S(-32, -14), S(-5, -35), S(5, -54), S(-21, -30), S(-90, -26), S(-56, 148), S(-17, 154), S(-9, 123), S(-5, 65), S(52, -9), S(74, -43), S(54, -41), S(-67, -6), S(137, 196), S(211, 204), S(163, 215), S(156, 143), S(95, 92), S(172, 18), S(-61, 47), S(-52, 38), S(28, -47), S(28, -47), S(28, -47), S(28, -47), S(28, -47), S(28, -47), S(28, -47), S(28, -47)},
                {S(-79, -89), S(-68, -34), S(-52, -7), S(-55, -19), S(-90, 5), S(-49, -36), S(-73, -4), S(-105, -52), S(-58, -45), S(-11, -18), S(13, -5), S(-16, 16), S(-24, 6), S(-31, 10), S(-20, -13), S(-107, -6), S(-53, -7), S(-6, 6), S(14, 18), S(12, 36), S(22, 31), S(-6, 17), S(-14, -1), S(-43, -23), S(-2, 11), S(19, 8), S(50, 39), S(22, 47), S(52, 42), S(34, 36), S(42, 12), S(-16, -6), S(5, 4), S(47, 24), S(69, 41), S(102, 37), S(70, 45), S(114, 35), S(29, 6), S(56, -21), S(-39, 16), S(80, 6), S(102, 23), S(113, 33), S(140, 19), S(162, 13), S(111, -9), S(-5, -7), S(-51, -7), S(-42, 23), S(52, 6), S(122, 3), S(78, 9), S(48, -4), S(18, -42), S(16, -36), S(-169, -81), S(-173, -10), S(-49, 25), S(-44, 4), S(10, -11), S(-290, 37), S(61, -58), S(-46, -99)},
                {S(-9, -51), S(24, -34), S(-31, -26), S(-47, -11), S(-58, -9), S(-53, -26), S(-45, -21), S(-134, 14), S(21, -18), S(48, -24), S(48, -21), S(-15, 1), S(-31, 4), S(-19, 8), S(-46, -4), S(-34, -9), S(1, -16), S(32, -3), S(29, 16), S(8, 10), S(-1, 23), S(-18, 16), S(-16, -10), S(-37, -11), S(-40, 18), S(11, 13), S(26, 17), S(51, 13), S(21, 17), S(0, 24), S(12, 9), S(-21, -1), S(-5, 3), S(10, 28), S(73, 16), S(65, 19), S(68, 18), S(66, 1), S(7, 19), S(-25, -5), S(-30, 10), S(31, 14), S(55, 12), S(50, 8), S(109, 0), S(56, 19), S(116, -27), S(31, -8), S(-54, -4), S(-33, 29), S(0, 4), S(7, 6), S(37, 6), S(93, -17), S(38, -32), S(-14, -29), S(-160, 25), S(-72, 18), S(-37, 5), S(12, 2), S(-49, 5), S(-160, 6), S(50, -34), S(-12, -25)},
                {S(-105, 5), S(-51, -8), S(-14, -23), S(-23, -12), S(-33, -12), S(-36, -24), S(-25, -31), S(-53, -23), S(-122, 11), S(-45, -10), S(-34, -4), S(-44, -12), S(-46, -16), S(-70, -9), S(-52, -29), S(-61, -31), S(-92, 0), S(-93, 17), S(-60, -2), S(-48, -1), S(-74, 9), S(-33, -12), S(-52, -18), S(-60, -34), S(-47, 5), S(-4, 10), S(-68, 23), S(-38, 19), S(-40, 10), S(-40, 5), S(-71, 0), S(-54, -11), S(15, 8), S(-22, 35), S(11, 17), S(9, 12), S(-11, 23), S(21, 5), S(-3, -4), S(-13, -2), S(12, 22), S(-15, 31), S(25, 20), S(40, 16), S(34, 14), S(48, 2), S(51, -2), S(9, 9), S(60, 17), S(72, 11), S(80, 15), S(67, 18), S(28, 29), S(145, -13), S(99, 2), S(50, -5), S(201, -64), S(170, -22), S(103, 3), S(41, 15), S(122, -7), S(92, 0), S(73, 3), S(74, -2)},
                {S(-126, -104), S(-71, -183), S(-28, -107), S(-72, -13), S(-27, -73), S(-46, -58), S(-61, -22), S(-10, -103), S(-131, 54), S(6, -106), S(27, -129), S(16, -60), S(-3, -52), S(16, -57), S(-2, -45), S(-11, -69), S(-46, -57), S(-7, -44), S(25, -10), S(-3, 7), S(11, -21), S(-6, -8), S(-2, -21), S(11, -36), S(-24, -27), S(-32, 25), S(-6, 27), S(-15, 71), S(6, 29), S(-2, 30), S(-6, 9), S(59, -87), S(-27, -10), S(-21, 46), S(5, 78), S(-1, 57), S(37, 57), S(21, 30), S(5, 46), S(19, -4), S(-6, -13), S(-31, 61), S(-19, 94), S(36, 54), S(92, 39), S(72, 34), S(107, -30), S(91, -45), S(-36, -6), S(-23, 21), S(-14, 76), S(0, 84), S(-21, 98), S(64, 57), S(36, 15), S(116, -27), S(-109, 66), S(-15, 26), S(-1, 74), S(64, 34), S(-19, 74), S(-14, 96), S(9, 67), S(143, -9)},
        },
        {
                {S(-47, -41), S(4, -70), S(-34, -53), S(-115, -35), S(-4, -33), S(-76, -14), S(33, -42), S(24, -69), S(-50, -24), S(-44, -25), S(-77, -15), S(-84, -15), S(-39, 17), S(-38, 12), S(1, -4), S(16, -23), S(-111, -10), S(-64, -9), S(-90, -1), S(-108, 6), S(-66, 44), S(-34, 26), S(-6, 17), S(-24, 0), S(-105, -16), S(-67, 1), S(-76, 9), S(-99, 22), S(-64, 58), S(-19, 47), S(-9, 37), S(-15, 9), S(-48, -13), S(-39, 12), S(-49, 17), S(-15, 14), S(7, 62), S(18, 61), S(-22, 64), S(-60, 48), S(-35, -1), S(38, 10), S(1, 9), S(10, 12), S(33, 47), S(152, 41), S(65, 65), S(-5, 44), S(-2, -12), S(54, -4), S(83, -14), S(8, -5), S(123, 25), S(103, 43), S(14, 56), S(144, -11), S(237, -125), S(91, -47), S(96, -54), S(69, -47), S(56, -10), S(60, 7), S(140, -11), S(155, -91)},
                {S(21, -37), S(21, -37), S(21, -37), S(21, -37), S(21, -37), S(21, -37), S(21, -37), S(21, -37), S(-114, 6), S(-83, 12), S(-69, -18), S(-78, -13), S(-48, -20), S(5, -28), S(63, -33), S(-2, -32), S(-110, -7), S(-77, -3), S(-66, -24), S(-52, -17), S(-16, -33), S(-28, -31), S(39, -29), S(3, -37), S(-103, -13), S(-48, -22), S(-46, -37), S(-25, -40), S(-24, -34), S(-22, -25), S(14, -12), S(-14, -18), S(-71, -14), S(-17, -28), S(-23, -50), S(-5, -50), S(-12, -19), S(-22, -3), S(22, 14), S(0, 10), S(-44, 14), S(15, -20), S(53, -47), S(21, -32), S(17, 37), S(-30, 92), S(11, 125), S(-45, 135), S(128, 52), S(-2, 44), S(103, 4), S(108, 14), S(173, 127), S(86, 212), S(44, 257), S(56, 225), S(21, -37), S(21, -37), S(21, -37), S(21, -37), S(21, -37), S(21, -37), S(21, -37), S(21, -37)},
                {S(-150, -24), S(-56, -50), S(-81, -18), S(-84, -2), S(-66, 4), S(-70, -16), S(-52, -43), S(-80, -104), S(-96, -26), S(-86, 12), S(-35, 12), S(-12, 8), S(-7, 8), S(-7, -6), S(-54, 23), S(-93, -23), S(-40, -17), S(-6, 14), S(-10, 29), S(26, 41), S(8, 40), S(5, 10), S(-7, 15), S(-56, -28), S(23, -10), S(-1, 26), S(36, 35), S(30, 44), S(35, 43), S(40, 34), S(43, 7), S(-11, -1), S(41, -12), S(48, 10), S(68, 48), S(105, 28), S(84, 44), S(70, 38), S(23, 23), S(-14, 6), S(-1, -20), S(91, -10), S(169, -2), S(145, 18), S(115, 17), S(104, 23), S(30, 26), S(4, -10), S(-22, -31), S(15, -3), S(47, 1), S(49, -6), S(72, 3), S(144, -16), S(3, 16), S(-42, -9), S(-306, -48), S(13, -45), S(-43, -29), S(-24, -8), S(-104, -2), S(1, 9), S(117, -30), S(-89, -67)},
                {S(-97, 10), S(-126, 34), S(-66, -15), S(-48, 0), S(-31, -16), S(-33, -27), S(-15, -45), S(-3, -59), S(-50, 21), S(-33, 0), S(-12, 2), S(-27, 1), S(-10, -1), S(40, -18), S(41, -16), S(-12, -27), S(-35, 1), S(-34, 21), S(-32, 22), S(-5, 13), S(7, 15), S(22, 2), S(46, -9), S(9, -9), S(-24, -4), S(6, 4), S(-10, 22), S(19, 16), S(61, 13), S(40, 12), S(17, 6), S(-16, -1), S(2, -5), S(15, 17), S(50, -10), S(79, 4), S(81, 14), S(41, 24), S(6, 26), S(-10, 12), S(14, -15), S(66, -14), S(34, 0), S(98, -10), S(57, 11), S(54, 24), S(41, 16), S(-36, 20), S(-7, -54), S(145, -40), S(58, -18), S(48, 1), S(11, 10), S(7, 14), S(-10, 24), S(-47, 9), S(-115, -2), S(11, -43), S(-62, -16), S(-93, 3), S(-42, 13), S(-81, 21), S(-14, 6), S(13, -12)},
                {S(-53, -21), S(-23, -19), S(-20, -18), S(-32, -3), S(-32, -4), S(-45, -12), S(-70, -6), S(-88, -10), S(-93, -3), S(-22, -31), S(-29, -19), S(-41, -20), S(-31, -13), S(-45, -14), S(-76, 15), S(-171, 8), S(-93, -4), S(-52, -18), S(-52, -10), S(-65, -7), S(-57, 5), S(-79, 14), S(-52, -2), S(-62, -13), S(-78, 8), S(-30, -5), S(-48, 8), S(-12, 0), S(-32, 17), S(-48, 9), S(-79, 10), S(-40, 0), S(-65, 22), S(2, 3), S(-24, 18), S(62, -1), S(22, 9), S(-6, 24), S(-38, 25), S(3, -4), S(6, 15), S(51, 9), S(74, 5), S(69, -6), S(80, -6), S(75, 4), S(74, -1), S(21, 9), S(39, 10), S(54, 6), S(122, -10), S(142, -8), S(67, 14), S(91, 1), S(47, 17), S(97, -10), S(61, 12), S(92, 2), S(130, -7), S(57, 14), S(72, 5), S(81, -2), S(62, 7), S(130, -14)},
                {S(-74, -5), S(-80, 6), S(-69, -28), S(-30, -97), S(-47, -58), S(-69, -54), S(-46, -60), S(-101, -110), S(-18, -55), S(-22, -24), S(-7, -82), S(-52, -4), S(-27, -42), S(1, -103), S(-15, -107), S(-73, -51), S(-35, 14), S(-16, -19), S(-30, 9), S(-28, 9), S(-43, 36), S(-23, 15), S(-50, 25), S(-58, -36), S(-10, -10), S(-20, 7), S(-20, 19), S(-32, 62), S(-45, 70), S(-44, 50), S(-28, 34), S(-43, 43), S(-5, 3), S(3, 41), S(-6, 46), S(17, 68), S(-24, 80), S(-3, 56), S(-49, 34), S(-31, -24), S(25, -6), S(52, -9), S(112, 15), S(41, 59), S(32, 37), S(25, 26), S(5, 46), S(-62, 35), S(106, -43), S(62, 15), S(125, -10), S(38, 57), S(7, 60), S(-25, 92), S(-46, 49), S(-17, -14), S(13, 10), S(71, 17), S(144, -16), S(306, -102), S(105, 3), S(135, -39), S(45, -13), S(51, -28)},
        },
        {
                {S(94, -35), S(168, -67), S(130, -50), S(-8, -23), S(-155, -40), S(-223, -9), S(-104, -43), S(-106, -79), S(96, -18), S(76, -14), S(54, -7), S(32, -5), S(-208, 21), S(-194, 18), S(-115, -13), S(-110, -34), S(21, -2), S(66, -1), S(25, 11), S(17, 16), S(-216, 46), S(-210, 35), S(-165, 11), S(-181, -6), S(33, -10), S(52, 10), S(43, 19), S(16, 32), S(-199, 57), S(-210, 51), S(-196, 35), S(-193, 6), S(90, -7), S(85, 20), S(60, 27), S(99, 20), S(-130, 50), S(-96, 45), S(-151, 53), S(-180, 23), S(94, 6), S(162, 17), S(121, 14), S(123, 18), S(-13, 14), S(11, 34), S(-42, 55), S(-112, 30), S(145, -8), S(176, 2), S(204, -8), S(117, 1), S(-35, 10), S(22, 12), S(-97, 52), S(-122, 3), S(367, -117), S(248, -46), S(222, -50), S(193, -42), S(127, -49), S(-67, 12), S(58, -3), S(178, -87)},
                {S(29, -26), S(29, -26), S(29, -26), S(29, -26), S(29, -26), S(29, -26), S(29, -26), S(29, -26), S(-82, 0), S(-53, -5), S(-65, -16), S(-69, -7), S(-52, -1), S(-8, -13), S(40, -29), S(-28, -44), S(-82, -6), S(-51, -9), S(-58, -28), S(-54, -21), S(-36, -19), S(-32, -24), S(21, -27), S(-24, -40), S(-77, -3), S(-40, -11), S(-45, -33), S(-31, -38), S(-25, -36), S(-21, -32), S(0, -25), S(-43, -32), S(-66, 16), S(-36, 5), S(-37, -15), S(-18, -38), S(2, -37), S(2, -40), S(8, -19), S(-25, -30), S(-66, 87), S(-29, 74), S(3, 45), S(2, 20), S(31, -5), S(77, -24), S(53, 3), S(-3, 7), S(119, 162), S(89, 179), S(93, 154), S(103, 108), S(130, 66), S(85, 34), S(-64, 86), S(-8, 79), S(29, -26), S(29, -26), S(29, -26), S(29, -26), S(29, -26), S(29, -26), S(29, -26), S(29, -26)},
                {S(-100, -88), S(-32, -76), S(-74, -18), S(-45, -12), S(-33, -23), S(-20, -31), S(-35, -59), S(-64, -90), S(-55, -50), S(-47, -6), S(-15, -9), S(-3, -3), S(-5, 1), S(7, -17), S(-13, -22), S(-14, -51), S(-27, -39), S(-5, -1), S(10, 6), S(21, 31), S(26, 30), S(12, 11), S(17, 4), S(-19, -31), S(-13, -5), S(2, 19), S(28, 40), S(19, 55), S(36, 54), S(24, 51), S(37, 23), S(-1, -1), S(1, -2), S(22, 24), S(49, 41), S(79, 49), S(45, 57), S(76, 52), S(22, 40), S(43, 10), S(-24, -9), S(38, 10), S(69, 32), S(86, 37), S(125, 22), S(182, 18), S(84, 12), S(38, -13), S(-43, -14), S(-22, 13), S(55, 6), S(60, 26), S(76, 11), S(138, -29), S(-5, -14), S(10, -35), S(-232, -2), S(-153, 29), S(-138, 53), S(-69, 34), S(36, 9), S(-151, 21), S(-55, -27), S(-65, -150)},
                {S(-29, -45), S(-23, -29), S(-22, -47), S(-44, -9), S(-41, -11), S(-27, -16), S(-19, -29), S(-37, -33), S(-4, -23), S(-1, -27), S(7, -12), S(-11, -3), S(-3, 3), S(16, -17), S(26, -19), S(18, -55), S(-7, -19), S(12, 1), S(3, 14), S(13, 11), S(11, 19), S(8, 10), S(11, -10), S(19, -25), S(-14, -4), S(6, 12), S(14, 22), S(34, 25), S(33, 22), S(9, 16), S(9, 7), S(2, -12), S(-19, 5), S(14, 18), S(36, 11), S(64, 27), S(45, 27), S(51, 17), S(10, 24), S(0, 4), S(-11, 2), S(29, 10), S(42, 14), S(60, 6), S(78, 8), S(89, 17), S(76, 4), S(34, -5), S(-43, -2), S(18, 8), S(7, 14), S(-8, 9), S(9, 8), S(75, -14), S(0, -1), S(12, -28), S(-51, -1), S(-115, 23), S(-92, 20), S(-133, 32), S(-118, 12), S(-134, 13), S(57, -15), S(-54, 14)},
                {S(-51, -19), S(-46, -18), S(-37, 0), S(-29, -3), S(-28, -14), S(-36, -20), S(-25, -21), S(-45, -51), S(-80, -17), S(-62, -13), S(-48, -8), S(-41, -12), S(-34, -23), S(-26, -35), S(-2, -43), S(-64, -30), S(-78, -10), S(-66, 1), S(-60, -5), S(-43, -7), S(-43, -10), S(-50, -14), S(-2, -34), S(-42, -35), S(-66, 10), S(-63, 19), S(-57, 21), S(-34, 12), S(-34, 2), S(-45, 7), S(-20, -10), S(-36, -18), S(-49, 26), S(-34, 24), S(-14, 25), S(17, 14), S(16, 9), S(14, 8), S(17, 5), S(9, -1), S(-20, 29), S(9, 22), S(17, 25), S(41, 11), S(80, -3), S(84, -3), S(142, -23), S(25, 8), S(5, 32), S(14, 34), S(33, 34), S(53, 23), S(47, 26), S(117, -1), S(102, 2), S(114, -14), S(45, 11), S(45, 18), S(50, 21), S(66, 10), S(73, 9), S(56, 17), S(107, 3), S(112, -6)},
                {S(-22, -61), S(-34, -66), S(-31, -49), S(-6, -95), S(-16, -78), S(-32, -109), S(-56, -97), S(-54, -84), S(-28, -59), S(-10, -53), S(-3, -65), S(-5, -53), S(-4, -57), S(12, -101), S(22, -129), S(-2, -128), S(-30, -44), S(-7, -44), S(-16, -1), S(-15, -17), S(-9, -18), S(-2, -19), S(8, -39), S(7, -66), S(-28, -36), S(-25, 9), S(-19, 12), S(-24, 47), S(-14, 37), S(-13, 36), S(3, 16), S(5, 3), S(-27, -21), S(-34, 28), S(-18, 35), S(-2, 47), S(3, 69), S(-6, 94), S(-2, 64), S(17, 25), S(-34, -16), S(-40, 28), S(-11, 33), S(-5, 57), S(41, 65), S(108, 38), S(83, 55), S(29, 41), S(-57, 26), S(-54, 59), S(-24, 65), S(-42, 97), S(-26, 113), S(131, 7), S(7, 130), S(89, -10), S(-59, 45), S(-17, 34), S(-8, 44), S(17, 47), S(31, 51), S(120, 17), S(134, 15), S(103, 27)},
        },
};
const int passedPawns[] = { S(43, -8), S(43, -8), S(37, 19), S(63, 36), S(94, 40), S(131, -49) };
const int bishopPair = S(36, 64);
const int material[] = { S(9993, 10004), S(127, 154), S(407, 372), S(427, 396), S(580, 708), S(1269, 1270) };
void testEval() {
    for (int pieceType = 0; pieceType < 6; pieceType++) {
        for (int sq = 0; sq < 64; sq++) {
            //cout << ((short)psts[pieceType][sq ^ 56]) << " ";
            //cout << (extract_eg(psts[pieceType][sq ^ 56])) << " ";
            if (sq % 8 == 7) {
                cout << "\n";
            }
        }
        cout << "\n";
    }
    return;
}

int evaluate2(Board& board) {
    int score[2] = { S(0, 0), S(0, 0) };
    int bishopCount[2] = { 0,0 };
    int gamePhase = 0;

    int buckets[2] = { kingBuckets[board.kingLocations[1]], kingBuckets[board.kingLocations[2] ^ 56] };

    uint64_t occupiedBoard = board.occupiedBoard[1] | board.occupiedBoard[2];
    while (occupiedBoard != 0) {
        int sq = popLSB(occupiedBoard);
        /* evaluate each piece */
        int piece = board.rawBoard[sq];

        if (piece != 0) {
            int pieceType = (piece % 8 - 1);
            int pieceColor = piece / 8 - 1;
            int pieceIndex = sq ^ (pieceColor == 1 ? 56 : 0);

            int bucketIndex = 2 * buckets[pieceColor] + buckets[1 - pieceColor];

            score[pieceColor] += material[pieceType];
            score[pieceColor] += psts[bucketIndex][pieceType][pieceIndex];

            gamePhase += gamephaseInc[pieceType];

            if (pieceType == 1 && pieceColor == board.currentPlayer - 1) {	// Passed Pawn Detection
                if (!(passedPawnMasks[board.currentPlayer - 1][sq] & board.pieceBoards[2])) {
                    score[pieceColor] += passedPawns[pieceIndex / 8 - 1];
                }
            }
            if (pieceType == 3) {
                bishopCount[pieceColor]++;
            }
        }
    }

    for (int col = 0; col < 2; col++) {
        if (bishopCount[col] == 2) {
            score[col] += bishopPair;
        }
    }

    /* tapered eval */
    int mergedScore = score[0] - score[1];

    //cout << extract_mg(mergedScore) << " " << extract_eg(mergedScore) << "\n";

    int finalScore = (extract_mg(mergedScore) * gamePhase + extract_eg(mergedScore) * (24 - gamePhase));

    finalScore = finalScore / (board.currentPlayer == 1 ? 24 : -24) + gamePhase / 2;

    return finalScore;

}