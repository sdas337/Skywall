#include "eval.h"

using namespace std;

// Sourced Pesto Eval

#define FLIP(sq) ((sq)^56)

//int mg_value[6] = { 0, 82, 337, 365, 477, 1025};
//int eg_value[6] = { 0, 94, 281, 297, 512,  936};

int mg_value[6] = { 10000, 100, 310, 330, 500, 1000 };
int eg_value[6] = { 10000, 94, 281, 297, 512, 936};

uint64_t passedPawnMasks[2][64] = { 
    {217020518514230016, 506381209866536704, 1012762419733073408, 2025524839466146816, 4051049678932293632, 8102099357864587264, 16204198715729174528, 13889313184910721024, 217020518514229248, 506381209866534912, 1012762419733069824, 2025524839466139648, 4051049678932279296, 8102099357864558592, 16204198715729117184, 13889313184910671872, 217020518514032640, 506381209866076160, 1012762419732152320, 2025524839464304640, 4051049678928609280, 8102099357857218560, 16204198715714437120, 13889313184898088960, 217020518463700992, 506381209748635648, 1012762419497271296, 2025524838994542592, 4051049677989085184, 8102099355978170368, 16204198711956340736, 13889313181676863488, 217020505578799104, 506381179683864576, 1012762359367729152, 2025524718735458304, 4051049437470916608, 8102098874941833216, 16204197749883666432, 13889312357043142656, 217017207043915776, 506373483102470144, 1012746966204940288, 2025493932409880576, 4050987864819761152, 8101975729639522304, 16203951459279044608, 13889101250810609664, 216172782113783808, 504403158265495552, 1008806316530991104, 2017612633061982208, 4035225266123964416, 8070450532247928832, 16140901064495857664, 13835058055282163712, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 14, 28, 56, 112, 224, 192, 771, 1799, 3598, 7196, 14392, 28784, 57568, 49344, 197379, 460551, 921102, 1842204, 3684408, 7368816, 14737632, 12632256, 50529027, 117901063, 235802126, 471604252, 943208504, 1886417008, 3772834016, 3233857728, 12935430915, 30182672135, 60365344270, 120730688540, 241461377080, 482922754160, 965845508320, 827867578560, 3311470314243, 7726764066567, 15453528133134, 30907056266268, 61814112532536, 123628225065072, 247256450130144, 211934100111552, 847736400446211, 1978051601041159, 3956103202082318, 7912206404164636, 15824412808329272, 31648825616658544, 63297651233317088, 54255129628557504}
};

int mg_pawn_table[64] = {
      0,   0,   0,   0,   0,   0,  0,   0,
     98, 134,  61,  95,  68, 126, 34, -11,
     -6,   7,  26,  31,  65,  56, 25, -20,
    -14,  13,   6,  21,  23,  12, 17, -23,
    -27,  -2,  -5,  12,  17,   6, 10, -25,
    -26,  -4,  -4, -10,   3,   3, 33, -12,
    -35,  -1, -20, -23, -15,  24, 38, -22,
      0,   0,   0,   0,   0,   0,  0,   0,
};

int eg_pawn_table[64] = {
      0,   0,   0,   0,   0,   0,   0,   0,
    178, 173, 158, 134, 147, 132, 165, 187,
     94, 100,  85,  67,  56,  53,  82,  84,
     32,  24,  13,   5,  -2,   4,  17,  17,
     13,   9,  -3,  -7,  -7,  -8,   3,  -1,
      4,   7,  -6,   1,   0,  -5,  -1,  -8,
     13,   8,   8,  10,  13,   0,   2,  -7,
      0,   0,   0,   0,   0,   0,   0,   0,
};

int mg_knight_table[64] = {
    -167, -89, -34, -49,  61, -97, -15, -107,
     -73, -41,  72,  36,  23,  62,   7,  -17,
     -47,  60,  37,  65,  84, 129,  73,   44,
      -9,  17,  19,  53,  37,  69,  18,   22,
     -13,   4,  16,  13,  28,  19,  21,   -8,
     -23,  -9,  12,  10,  19,  17,  25,  -16,
     -29, -53, -12,  -3,  -1,  18, -14,  -19,
    -105, -21, -58, -33, -17, -28, -19,  -23,
};

int eg_knight_table[64] = {
    -58, -38, -13, -28, -31, -27, -63, -99,
    -25,  -8, -25,  -2,  -9, -25, -24, -52,
    -24, -20,  10,   9,  -1,  -9, -19, -41,
    -17,   3,  22,  22,  22,  11,   8, -18,
    -18,  -6,  16,  25,  16,  17,   4, -18,
    -23,  -3,  -1,  15,  10,  -3, -20, -22,
    -42, -20, -10,  -5,  -2, -20, -23, -44,
    -29, -51, -23, -15, -22, -18, -50, -64,
};

int mg_bishop_table[64] = {
    -29,   4, -82, -37, -25, -42,   7,  -8,
    -26,  16, -18, -13,  30,  59,  18, -47,
    -16,  37,  43,  40,  35,  50,  37,  -2,
     -4,   5,  19,  50,  37,  37,   7,  -2,
     -6,  13,  13,  26,  34,  12,  10,   4,
      0,  15,  15,  15,  14,  27,  18,  10,
      4,  15,  16,   0,   7,  21,  33,   1,
    -33,  -3, -14, -21, -13, -12, -39, -21,
};

int eg_bishop_table[64] = {
    -14, -21, -11,  -8, -7,  -9, -17, -24,
     -8,  -4,   7, -12, -3, -13,  -4, -14,
      2,  -8,   0,  -1, -2,   6,   0,   4,
     -3,   9,  12,   9, 14,  10,   3,   2,
     -6,   3,  13,  19,  7,  10,  -3,  -9,
    -12,  -3,   8,  10, 13,   3,  -7, -15,
    -14, -18,  -7,  -1,  4,  -9, -15, -27,
    -23,  -9, -23,  -5, -9, -16,  -5, -17,
};

int mg_rook_table[64] = {
     32,  42,  32,  51, 63,  9,  31,  43,
     27,  32,  58,  62, 80, 67,  26,  44,
     -5,  19,  26,  36, 17, 45,  61,  16,
    -24, -11,   7,  26, 24, 35,  -8, -20,
    -36, -26, -12,  -1,  9, -7,   6, -23,
    -45, -25, -16, -17,  3,  0,  -5, -33,
    -44, -16, -20,  -9, -1, 11,  -6, -71,
    -19, -13,   1,  17, 16,  7, -37, -26,
};

int eg_rook_table[64] = {
    13, 10, 18, 15, 12,  12,   8,   5,
    11, 13, 13, 11, -3,   3,   8,   3,
     7,  7,  7,  5,  4,  -3,  -5,  -3,
     4,  3, 13,  1,  2,   1,  -1,   2,
     3,  5,  8,  4, -5,  -6,  -8, -11,
    -4,  0, -5, -1, -7, -12,  -8, -16,
    -6, -6,  0,  2, -9,  -9, -11,  -3,
    -9,  2,  3, -1, -5, -13,   4, -20,
};

int mg_queen_table[64] = {
    -28,   0,  29,  12,  59,  44,  43,  45,
    -24, -39,  -5,   1, -16,  57,  28,  54,
    -13, -17,   7,   8,  29,  56,  47,  57,
    -27, -27, -16, -16,  -1,  17,  -2,   1,
     -9, -26,  -9, -10,  -2,  -4,   3,  -3,
    -14,   2, -11,  -2,  -5,   2,  14,   5,
    -35,  -8,  11,   2,   8,  15,  -3,   1,
     -1, -18,  -9,  10, -15, -25, -31, -50,
};

int eg_queen_table[64] = {
     -9,  22,  22,  27,  27,  19,  10,  20,
    -17,  20,  32,  41,  58,  25,  30,   0,
    -20,   6,   9,  49,  47,  35,  19,   9,
      3,  22,  24,  45,  57,  40,  57,  36,
    -18,  28,  19,  47,  31,  34,  39,  23,
    -16, -27,  15,   6,   9,  17,  10,   5,
    -22, -23, -30, -16, -16, -23, -36, -32,
    -33, -28, -22, -43,  -5, -32, -20, -41,
};

int mg_king_table[64] = {
    -65,  23,  16, -15, -56, -34,   2,  13,
     29,  -1, -20,  -7,  -8,  -4, -38, -29,
     -9,  24,   2, -16, -20,   6,  22, -22,
    -17, -20, -12, -27, -30, -25, -14, -36,
    -49,  -1, -27, -39, -46, -44, -33, -51,
    -14, -14, -22, -46, -44, -30, -15, -27,
      1,   7,  -8, -64, -43, -16,   9,   8,
    -15,  36,  12, -54,   8, -28,  24,  14,
};

int eg_king_table[64] = {
    -74, -35, -18, -18, -11,  15,   4, -17,
    -12,  17,  14,  17,  17,  38,  23,  11,
     10,  17,  23,  15,  20,  45,  44,  13,
     -8,  22,  24,  27,  26,  33,  26,   3,
    -18,  -4,  21,  24,  27,  23,   9, -11,
    -19,  -3,  11,  21,  23,  16,   7,  -9,
    -27, -11,   4,  13,  14,   4,  -5, -17,
    -53, -34, -21, -11, -28, -14, -24, -43
};

int* mg_pesto_table[6] =
{
    mg_king_table,
    mg_pawn_table,
    mg_knight_table,
    mg_bishop_table,
    mg_rook_table,
    mg_queen_table    
};

int* eg_pesto_table[6] =
{
    eg_king_table,
    eg_pawn_table,
    eg_knight_table,
    eg_bishop_table,
    eg_rook_table,
    eg_queen_table
};

int gamephaseInc[6] = {0, 0, 1, 1, 2, 4};
int mg_table[6][64];
int eg_table[6][64];


// no piece  = 0, king = 1, pawn = 2, knight = 3, bishop = 4, rook = 5, queen = 6, white = 8, black = 16

/*const int material[] = {S(10000, 10000), S(100, 94), S(310, 281), S(330, 297), S(500, 512), S(1000, 936)};
const int psts[6][64] = {
    {S(-15, -53), S(36, -34), S(12, -21), S(-54, -11), S(8, -28), S(-28, -14), S(24, -24), S(14, -43), S(1, -27), S(7, -11), S(-8, 4), S(-64, 13), S(-43, 14), S(-16, 4), S(9, -5), S(8, -17), S(-14, -19), S(-14, -3), S(-22, 11), S(-46, 21), S(-44, 23), S(-30, 16), S(-15, 7), S(-27, -9), S(-49, -18), S(-1, -4), S(-27, 21), S(-39, 24), S(-46, 27), S(-44, 23), S(-33, 9), S(-51, -11), S(-17, -8), S(-20, 22), S(-12, 24), S(-27, 27), S(-30, 26), S(-25, 33), S(-14, 26), S(-36, 3), S(-9, 10), S(24, 17), S(2, 23), S(-16, 15), S(-20, 20), S(6, 45), S(22, 44), S(-22, 13), S(29, -12), S(-1, 17), S(-20, 14), S(-7, 17), S(-8, 17), S(-4, 38), S(-38, 23), S(-29, 11), S(-65, -74), S(23, -35), S(16, -18), S(-15, -18), S(-56, -11), S(-34, 15), S(2, 4), S(13, -17)},
    {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-35, 13), S(-1, 8), S(-20, 8), S(-23, 10), S(-15, 13), S(24, 0), S(38, 2), S(-22, -7), S(-26, 4), S(-4, 7), S(-4, -6), S(-10, 1), S(3, 0), S(3, -5), S(33, -1), S(-12, -8), S(-27, 13), S(-2, 9), S(-5, -3), S(12, -7), S(17, -7), S(6, -8), S(10, 3), S(-25, -1), S(-14, 32), S(13, 24), S(6, 13), S(21, 5), S(23, -2), S(12, 4), S(17, 17), S(-23, 17), S(-6, 94), S(7, 100), S(26, 85), S(31, 67), S(65, 56), S(56, 53), S(25, 82), S(-20, 84), S(98, 178), S(134, 173), S(61, 158), S(95, 134), S(68, 147), S(126, 132), S(34, 165), S(-11, 187), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)},
    {S(-105, -29), S(-21, -51), S(-58, -23), S(-33, -15), S(-17, -22), S(-28, -18), S(-19, -50), S(-23, -64), S(-29, -42), S(-53, -20), S(-12, -10), S(-3, -5), S(-1, -2), S(18, -20), S(-14, -23), S(-19, -44), S(-23, -23), S(-9, -3), S(12, -1), S(10, 15), S(19, 10), S(17, -3), S(25, -20), S(-16, -22), S(-13, -18), S(4, -6), S(16, 16), S(13, 25), S(28, 16), S(19, 17), S(21, 4), S(-8, -18), S(-9, -17), S(17, 3), S(19, 22), S(53, 22), S(37, 22), S(69, 11), S(18, 8), S(22, -18), S(-47, -24), S(60, -20), S(37, 10), S(65, 9), S(84, -1), S(129, -9), S(73, -19), S(44, -41), S(-73, -25), S(-41, -8), S(72, -25), S(36, -2), S(23, -9), S(62, -25), S(7, -24), S(-17, -52), S(-167, -58), S(-89, -38), S(-34, -13), S(-49, -28), S(61, -31), S(-97, -27), S(-15, -63), S(-107, -99)},
    {S(-33, -23), S(-3, -9), S(-14, -23), S(-21, -5), S(-13, -9), S(-12, -16), S(-39, -5), S(-21, -17), S(4, -14), S(15, -18), S(16, -7), S(0, -1), S(7, 4), S(21, -9), S(33, -15), S(1, -27), S(0, -12), S(15, -3), S(15, 8), S(15, 10), S(14, 13), S(27, 3), S(18, -7), S(10, -15), S(-6, -6), S(13, 3), S(13, 13), S(26, 19), S(34, 7), S(12, 10), S(10, -3), S(4, -9), S(-4, -3), S(5, 9), S(19, 12), S(50, 9), S(37, 14), S(37, 10), S(7, 3), S(-2, 2), S(-16, 2), S(37, -8), S(43, 0), S(40, -1), S(35, -2), S(50, 6), S(37, 0), S(-2, 4), S(-26, -8), S(16, -4), S(-18, 7), S(-13, -12), S(30, -3), S(59, -13), S(18, -4), S(-47, -14), S(-29, -14), S(4, -21), S(-82, -11), S(-37, -8), S(-25, -7), S(-42, -9), S(7, -17), S(-8, -24)},
    {S(-19, -9), S(-13, 2), S(1, 3), S(17, -1), S(16, -5), S(7, -13), S(-37, 4), S(-26, -20), S(-44, -6), S(-16, -6), S(-20, 0), S(-9, 2), S(-1, -9), S(11, -9), S(-6, -11), S(-71, -3), S(-45, -4), S(-25, 0), S(-16, -5), S(-17, -1), S(3, -7), S(0, -12), S(-5, -8), S(-33, -16), S(-36, 3), S(-26, 5), S(-12, 8), S(-1, 4), S(9, -5), S(-7, -6), S(6, -8), S(-23, -11), S(-24, 4), S(-11, 3), S(7, 13), S(26, 1), S(24, 2), S(35, 1), S(-8, -1), S(-20, 2), S(-5, 7), S(19, 7), S(26, 7), S(36, 5), S(17, 4), S(45, -3), S(61, -5), S(16, -3), S(27, 11), S(32, 13), S(58, 13), S(62, 11), S(80, -3), S(67, 3), S(26, 8), S(44, 3), S(32, 13), S(42, 10), S(32, 18), S(51, 15), S(63, 12), S(9, 12), S(31, 8), S(43, 5)},
    {S(-1, -33), S(-18, -28), S(-9, -22), S(10, -43), S(-15, -5), S(-25, -32), S(-31, -20), S(-50, -41), S(-35, -22), S(-8, -23), S(11, -30), S(2, -16), S(8, -16), S(15, -23), S(-3, -36), S(1, -32), S(-14, -16), S(2, -27), S(-11, 15), S(-2, 6), S(-5, 9), S(2, 17), S(14, 10), S(5, 5), S(-9, -18), S(-26, 28), S(-9, 19), S(-10, 47), S(-2, 31), S(-4, 34), S(3, 39), S(-3, 23), S(-27, 3), S(-27, 22), S(-16, 24), S(-16, 45), S(-1, 57), S(17, 40), S(-2, 57), S(1, 36), S(-13, -20), S(-17, 6), S(7, 9), S(8, 49), S(29, 47), S(56, 35), S(47, 19), S(57, 9), S(-24, -17), S(-39, 20), S(-5, 32), S(1, 41), S(-16, 58), S(57, 25), S(28, 30), S(54, 0), S(-28, -9), S(0, 22), S(29, 22), S(12, 27), S(59, 27), S(44, 19), S(43, 10), S(45, 20)}
};

const int passedPawns[] = {S(1, 12), S(-4, 19), S(-14, 52), S(13, 74), S(8, 150), S(51, 162) };*/

const int material[] = { S(9988, 10004), S(112, 121), S(348, 343), S(389, 365), S(506, 640), S(1006, 1194) };
const int psts[][64] = {
        {S(-15, -28), S(60, -60), S(22, -42), S(-116, -16), S(4, -58), S(-81, -25), S(41, -59), S(25, -83), S(-13, -11), S(-32, -7), S(-55, 0), S(-77, 2), S(-63, 0), S(-50, -4), S(13, -26), S(11, -37), S(-87, 5), S(-44, 6), S(-82, 18), S(-92, 23), S(-85, 24), S(-82, 16), S(-51, 1), S(-70, -11), S(-75, -3), S(-56, 17), S(-64, 26), S(-91, 39), S(-87, 37), S(-85, 32), S(-92, 23), S(-88, 0), S(-17, 0), S(-21, 26), S(-46, 34), S(-10, 27), S(-28, 38), S(-3, 34), S(-58, 45), S(-68, 19), S(-11, 13), S(56, 24), S(14, 20), S(16, 26), S(90, 10), S(73, 36), S(16, 49), S(-30, 31), S(36, -1), S(70, 9), S(94, 0), S(8, 9), S(82, 6), S(66, 29), S(34, 40), S(47, -6), S(258, -110), S(137, -39), S(115, -43), S(83, -35), S(161, -37), S(51, 3), S(110, 4), S(230, -58)},
        {S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-67, 7), S(-41, 3), S(-47, -10), S(-62, -1), S(-42, 1), S(1, -11), S(41, -21), S(-31, -19), S(-67, 1), S(-37, -1), S(-48, -16), S(-49, -10), S(-30, -11), S(-19, -18), S(27, -19), S(-20, -23), S(-64, 5), S(-32, 0), S(-30, -20), S(-19, -26), S(-16, -25), S(-10, -22), S(4, -14), S(-36, -18), S(-53, 19), S(-22, 9), S(-26, -8), S(-10, -25), S(6, -22), S(4, -24), S(17, -6), S(-12, -13), S(-34, 63), S(2, 46), S(17, 28), S(3, 14), S(26, 2), S(65, -5), S(82, 6), S(9, 24), S(169, 92), S(159, 97), S(152, 88), S(127, 65), S(137, 62), S(108, 62), S(-19, 102), S(52, 81), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31), S(-17, -31)},
        {S(-95, -65), S(-39, -62), S(-65, -20), S(-49, -14), S(-38, -20), S(-9, -39), S(-30, -57), S(-73, -74), S(-61, -32), S(-47, -8), S(-21, -3), S(-4, -5), S(-8, -2), S(6, -17), S(-17, -15), S(-31, -29), S(-33, -24), S(-6, 1), S(6, 9), S(22, 22), S(32, 20), S(10, 5), S(19, -7), S(-30, -21), S(-10, 0), S(11, 16), S(30, 36), S(21, 42), S(36, 41), S(28, 32), S(30, 11), S(-4, -6), S(-2, 11), S(20, 22), S(52, 39), S(86, 36), S(46, 44), S(78, 39), S(17, 29), S(42, 1), S(-14, -2), S(45, 9), S(81, 19), S(87, 29), S(120, 16), S(135, 17), S(69, 12), S(21, -6), S(-35, -11), S(-10, 19), S(51, 5), S(61, 15), S(56, 13), S(119, -12), S(-25, 11), S(2, -18), S(-181, -38), S(-101, 4), S(-80, 34), S(-47, 12), S(28, -1), S(-151, 27), S(-16, -21), S(-137, -73)},
        {S(-43, -27), S(-19, -16), S(-22, -32), S(-46, -2), S(-32, -9), S(-21, -16), S(4, -37), S(-46, -26), S(1, -12), S(-4, -19), S(9, -8), S(-8, 2), S(-1, 4), S(18, -11), S(25, -18), S(3, -34), S(-6, -11), S(14, 3), S(6, 11), S(16, 5), S(18, 15), S(9, 6), S(12, -10), S(9, -13), S(-9, -3), S(9, 10), S(15, 16), S(41, 15), S(37, 15), S(10, 17), S(10, 11), S(2, -7), S(-5, 1), S(14, 18), S(42, 6), S(62, 15), S(47, 18), S(45, 14), S(13, 19), S(-7, 5), S(-6, 1), S(43, 1), S(29, 10), S(58, 4), S(67, 10), S(62, 14), S(58, 2), S(33, -4), S(-22, -10), S(12, 1), S(19, 5), S(-8, 10), S(23, 2), S(33, 2), S(-2, 1), S(-16, -13), S(-77, -2), S(-99, 12), S(-88, 7), S(-88, 14), S(-88, 14), S(-146, 14), S(-3, -1), S(-18, -9)},
        {S(-39, -23), S(-33, -18), S(-23, -7), S(-17, -8), S(-15, -19), S(-23, -24), S(-15, -26), S(-50, -30), S(-68, -13), S(-46, -16), S(-34, -11), S(-28, -16), S(-24, -21), S(-19, -30), S(-8, -31), S(-65, -21), S(-66, -9), S(-55, -3), S(-46, -6), S(-34, -9), S(-31, -11), S(-36, -13), S(-1, -33), S(-40, -29), S(-58, 9), S(-45, 11), S(-41, 15), S(-21, 8), S(-22, 0), S(-41, 5), S(-37, -1), S(-43, -12), S(-38, 24), S(-32, 27), S(-11, 24), S(19, 11), S(22, 7), S(9, 15), S(4, 10), S(-2, 3), S(-3, 23), S(14, 21), S(30, 21), S(38, 14), S(76, -1), S(65, 3), S(77, 0), S(17, 13), S(11, 26), S(25, 24), S(43, 24), S(67, 14), S(49, 18), S(86, 3), S(54, 13), S(65, -3), S(55, -1), S(32, 17), S(49, 13), S(60, 7), S(66, 5), S(31, 15), S(60, 7), S(85, -5)},
        {S(-18, -55), S(-28, -59), S(-23, -46), S(2, -85), S(-15, -67), S(-28, -93), S(-46, -73), S(-50, -74), S(-27, -38), S(-4, -48), S(5, -54), S(5, -51), S(4, -51), S(15, -81), S(25, -103), S(2, -122), S(-29, -30), S(-4, -37), S(-7, -7), S(-9, -10), S(2, -16), S(6, -21), S(12, -47), S(7, -70), S(-20, -24), S(-27, 18), S(-10, 16), S(-16, 52), S(-7, 30), S(-9, 27), S(3, 7), S(4, -13), S(-25, -1), S(-26, 38), S(-18, 55), S(1, 57), S(7, 66), S(0, 69), S(-5, 47), S(18, 7), S(-20, -7), S(-23, 39), S(-7, 51), S(-8, 69), S(45, 52), S(84, 32), S(65, 19), S(34, 14), S(-41, 24), S(-54, 67), S(-34, 83), S(-19, 83), S(-17, 98), S(44, 47), S(-39, 74), S(46, -14), S(-50, 36), S(-13, 29), S(5, 43), S(41, 24), S(24, 44), S(75, 12), S(82, -2), S(111, -32)},
};
const int passedPawns[] = { S(57, -12), S(57, -10), S(52, 16), S(80, 28), S(123, 26), S(155, -54) };

void initEvalTables()
{
    int pc, p, sq;
    for (p = 0, pc = 0; p <= 5; pc++, p++) {
        for (sq = 0; sq < 64; sq++) {
            mg_table[pc][sq] = mg_value[p] + mg_pesto_table[p][FLIP(sq)];
            eg_table[pc][sq] = eg_value[p] + eg_pesto_table[p][FLIP(sq)];
        }
    }

    /*for (pc = 0; pc < 6; pc++) {
        cout << "{";
        for (sq = 0; sq < 64; sq++) {
            cout << "S(" << mg_pesto_table[pc][FLIP(sq)] << ", " << eg_pesto_table[pc][FLIP(sq)] << "), ";
        }
        cout << "}\n";
    }*/
}

void testEval() {
    for (int pieceType = 0; pieceType < 6; pieceType++) {
        for (int sq = 0; sq < 64; sq++) {
            cout << eg_pesto_table[pieceType][sq] << " ";
            //cout << ((short)psts[pieceType][sq ^ 56]) << " ";
            //cout << ((psts[pieceType][sq ^ 56] + 0x8000) >> 16) << " ";
            if (sq % 8 == 7) {
                cout << "\n";
            }
        }
        cout << "\n";
    }
    return;
}

void evalPawns(Board& board, int& mgScore, int& egScore) {
    //mgScore += 1;
    //egScore += 1;

    uint64_t relevantPawnBoard = board.pieceBoards[2] & board.occupiedBoard[board.currentPlayer];

    int mgPassedPawnScores[7] = { 0, 1, -4, -14, 13, 8, 51};
    int egPassedPawnScores[7] = { 0, 12, 19, 52, 74, 150, 162};

    while (relevantPawnBoard != 0) {
        int pawnSquare = popLSB(relevantPawnBoard);

        if (!(passedPawnMasks[board.currentPlayer - 1][pawnSquare] & board.pieceBoards[2])) {    // It's a passed pawn
            int index = pawnSquare ^ (board.currentPlayer == 2 ? 56 : 0);

            mgScore += (board.currentPlayer == 2 ? -1 : 1) * mgPassedPawnScores[index / 8 - 1];
            egScore += (board.currentPlayer == 2 ? -1 : 1) * egPassedPawnScores[index / 8 - 1];
        }
    }
}

void evalKnights(Board& board, int& mgScore, int& egScore) {
    mgScore += 1;
    egScore += 1;

    uint64_t relevantBoard = board.pieceBoards[3] & board.occupiedBoard[board.currentPlayer];

    while (relevantBoard != 0) {
        int square = popLSB(relevantBoard);
    }
}

void evalBishops(Board& board, int& mgScore, int& egScore) {
    mgScore += 1;
    egScore += 1;

    uint64_t relevantBoard = board.pieceBoards[4] & board.occupiedBoard[board.currentPlayer];

    while (relevantBoard != 0) {
        int square = popLSB(relevantBoard);
    }
}

void evalRooks(Board& board, int& mgScore, int& egScore) {
    mgScore += 1;
    egScore += 1;

    uint64_t relevantBoard = board.pieceBoards[5] & board.occupiedBoard[board.currentPlayer];

    while (relevantBoard != 0) {
        int square = popLSB(relevantBoard);
    }
}

void evalQueen(Board& board, int& mgScore, int& egScore) {
    mgScore += 1;
    egScore += 1;

    uint64_t relevantBoard = board.pieceBoards[6] & board.occupiedBoard[board.currentPlayer];

    while (relevantBoard != 0) {
        int square = popLSB(relevantBoard);
    }
}

int evaluate(Board& board) {
    int score[2] = {S(0, 0), S(0, 0) };
    int gamePhase = 0;

    /* evaluate each piece */
    for (int sq = 0; sq < 64; ++sq) {
        int piece = board.rawBoard[sq];

        if (piece != 0) {
            int pieceType = (piece % 8 - 1);
            int pieceColor = piece / 8 - 1;
            int index = sq ^ (pieceColor == 1 ? 56 : 0);

            score[pieceColor] += material[pieceType];
            score[pieceColor] += psts[pieceType][index];

            gamePhase += gamephaseInc[pieceType];

            if (pieceType == 1 && pieceColor == board.currentPlayer - 1) {	// Passed Pawn Detection
                if (!(passedPawnMasks[board.currentPlayer - 1][sq] & board.pieceBoards[2])) {
                    score[pieceColor] += passedPawns[index / 8 - 1];
                }
            }
        }
    }
    /* tapered eval */
    int mergedScore = score[0] - score[1];

    //cout << extract_mg(mergedScore) << " " << extract_eg(mergedScore) << "\n";

    int finalScore = (extract_mg(mergedScore) * gamePhase + extract_eg(mergedScore) * (24 - gamePhase));

    finalScore = finalScore / (board.currentPlayer == 1 ? 24 : -24) + gamePhase/2;

    return finalScore;

}

int evaluate2(Board& board) {
    int midgame[2];
    int endgame[2];
    int gamePhase = 0;

    midgame[0] = 0;
    midgame[1] = 0;
    endgame[0] = 0;
    endgame[1] = 0;

    /* evaluate each piece */
    for (int sq = 0; sq < 64; ++sq) {
        int piece = board.rawBoard[sq];

        if (piece != 0) {
            int pieceType = (piece % 8 - 1);
            int pieceColor = piece / 8 - 1;
            int index = sq ^ (pieceColor == 1 ? 56 : 0);

            midgame[pieceColor] += mg_table[pieceType][index];
            endgame[pieceColor] += eg_table[pieceType][index];
            gamePhase += gamephaseInc[pieceType];
        }
    }


    /* tapered eval */
    int mgScore = midgame[0] - midgame[1];
    int egScore = endgame[0] - endgame[1];

    int mgPhase = gamePhase;
    //if (mgPhase > 24) mgPhase = 24; /* in case of early promotion */
    int egPhase = 24 - mgPhase;

    //evalPawns(board, mgScore, egScore);

    int finalScore = (mgScore * mgPhase + egScore * egPhase);
    finalScore = finalScore / (board.currentPlayer == 1 ? 24 : -24) + gamePhase / 2;

    return finalScore;
}